"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.unstable_getServerSession = unstable_getServerSession;

var _core = require("../core");

var _detectHost = require("../utils/detect-host");

var _utils = require("./utils");

async function NextAuthNextHandler(req, res, options) {
  var _options$secret, _options$jwt$secret, _options$jwt, _options$trustHost, _process$env$AUTH_TRU, _process$env$NEXTAUTH, _ref, _handler$status, _handler$cookies, _handler$headers;

  const {
    nextauth,
    ...query
  } = req.query;
  (_options$secret = options.secret) !== null && _options$secret !== void 0 ? _options$secret : options.secret = (_options$jwt$secret = (_options$jwt = options.jwt) === null || _options$jwt === void 0 ? void 0 : _options$jwt.secret) !== null && _options$jwt$secret !== void 0 ? _options$jwt$secret : process.env.NEXTAUTH_SECRET;
  (_options$trustHost = options.trustHost) !== null && _options$trustHost !== void 0 ? _options$trustHost : options.trustHost = !!((_process$env$AUTH_TRU = process.env.AUTH_TRUST_HOST) !== null && _process$env$AUTH_TRU !== void 0 ? _process$env$AUTH_TRU : process.env.VERCEL);
  const handler = await (0, _core.NextAuthHandler)({
    req: {
      host: (0, _detectHost.detectHost)(options.trustHost, req.headers["x-forwarded-host"], (_process$env$NEXTAUTH = process.env.NEXTAUTH_URL) !== null && _process$env$NEXTAUTH !== void 0 ? _process$env$NEXTAUTH : process.env.NODE_ENV !== "production" && "http://localhost:3000"),
      body: req.body,
      query,
      cookies: req.cookies,
      headers: req.headers,
      method: req.method,
      action: nextauth === null || nextauth === void 0 ? void 0 : nextauth[0],
      providerId: nextauth === null || nextauth === void 0 ? void 0 : nextauth[1],
      error: (_ref = req.query.error) !== null && _ref !== void 0 ? _ref : nextauth === null || nextauth === void 0 ? void 0 : nextauth[1]
    },
    options
  });
  res.status((_handler$status = handler.status) !== null && _handler$status !== void 0 ? _handler$status : 200);
  (_handler$cookies = handler.cookies) === null || _handler$cookies === void 0 ? void 0 : _handler$cookies.forEach(cookie => (0, _utils.setCookie)(res, cookie));
  (_handler$headers = handler.headers) === null || _handler$headers === void 0 ? void 0 : _handler$headers.forEach(h => res.setHeader(h.key, h.value));

  if (handler.redirect) {
    var _req$body;

    if (((_req$body = req.body) === null || _req$body === void 0 ? void 0 : _req$body.json) !== "true") {
      res.status(302).setHeader("Location", handler.redirect);
      return res.end();
    }

    return res.json({
      url: handler.redirect
    });
  }

  return res.send(handler.body);
}

function NextAuth(...args) {
  if (args.length === 1) {
    return async (req, res) => await NextAuthNextHandler(req, res, args[0]);
  }

  return NextAuthNextHandler(args[0], args[1], args[2]);
}

var _default = NextAuth;
exports.default = _default;
let experimentalWarningShown = false;
let experimentalRSCWarningShown = false;

async function unstable_getServerSession(...args) {
  var _options, _options$secret2, _options2, _options2$trustHost, _process$env$AUTH_TRU2, _process$env$NEXTAUTH2;

  if (!experimentalWarningShown && process.env.NODE_ENV !== "production") {
    console.warn("[next-auth][warn][EXPERIMENTAL_API]", "\n`unstable_getServerSession` is experimental and may be removed or changed in the future, as the name suggested.", `\nhttps://next-auth.js.org/configuration/nextjs#unstable_getServerSession}`, `\nhttps://next-auth.js.org/warnings#EXPERIMENTAL_API`);
    experimentalWarningShown = true;
  }

  const isRSC = args.length === 0 || args.length === 1;

  if (!experimentalRSCWarningShown && isRSC && process.env.NODE_ENV !== "production") {
    console.warn("[next-auth][warn][EXPERIMENTAL_API]", "\n`unstable_getServerSession` is used in a React Server Component.", `\nhttps://next-auth.js.org/configuration/nextjs#unstable_getServerSession}`, `\nhttps://next-auth.js.org/warnings#EXPERIMENTAL_API`);
    experimentalRSCWarningShown = true;
  }

  let req, res, options;

  if (isRSC) {
    options = Object.assign({}, args[0], {
      providers: []
    });

    const {
      headers,
      cookies
    } = require("next/headers");

    req = {
      headers: Object.fromEntries(headers()),
      cookies: Object.fromEntries(cookies().getAll().map(c => [c.name, c.value]))
    };
    res = {
      getHeader() {},

      setCookie() {},

      setHeader() {}

    };
  } else {
    req = args[0];
    res = args[1];
    options = Object.assign(args[2], {
      providers: []
    });
  }

  (_options$secret2 = (_options = options).secret) !== null && _options$secret2 !== void 0 ? _options$secret2 : _options.secret = process.env.NEXTAUTH_SECRET;
  (_options2$trustHost = (_options2 = options).trustHost) !== null && _options2$trustHost !== void 0 ? _options2$trustHost : _options2.trustHost = !!((_process$env$AUTH_TRU2 = process.env.AUTH_TRUST_HOST) !== null && _process$env$AUTH_TRU2 !== void 0 ? _process$env$AUTH_TRU2 : process.env.VERCEL);
  const session = await (0, _core.NextAuthHandler)({
    options,
    req: {
      host: (0, _detectHost.detectHost)(options.trustHost, req.headers["x-forwarded-host"], (_process$env$NEXTAUTH2 = process.env.NEXTAUTH_URL) !== null && _process$env$NEXTAUTH2 !== void 0 ? _process$env$NEXTAUTH2 : process.env.NODE_ENV !== "production" && "http://localhost:3000"),
      action: "session",
      method: "GET",
      cookies: req.cookies,
      headers: req.headers
    }
  });
  const {
    body,
    cookies,
    status = 200
  } = session;
  cookies === null || cookies === void 0 ? void 0 : cookies.forEach(cookie => (0, _utils.setCookie)(res, cookie));

  if (body && typeof body !== "string" && Object.keys(body).length) {
    if (status === 200) {
      if (isRSC) delete body.expires;
      return body;
    }

    throw new Error(body.message);
  }

  return null;
}