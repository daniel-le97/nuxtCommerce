var H = Object.defineProperty;
var p = Object.getOwnPropertySymbols;
var E = Object.prototype.hasOwnProperty, I = Object.prototype.propertyIsEnumerable;
var w = (e, n, o) => n in e ? H(e, n, { enumerable: !0, configurable: !0, writable: !0, value: o }) : e[n] = o, A = (e, n) => {
  for (var o in n || (n = {}))
    E.call(n, o) && w(e, o, n[o]);
  if (p)
    for (var o of p(n))
      I.call(n, o) && w(e, o, n[o]);
  return e;
};
var V = (e, n) => {
  var o = {};
  for (var l in e)
    E.call(e, l) && n.indexOf(l) < 0 && (o[l] = e[l]);
  if (e != null && p)
    for (var l of p(e))
      n.indexOf(l) < 0 && I.call(e, l) && (o[l] = e[l]);
  return o;
};
import a, { useRef as x } from "react";
import t from "prop-types";
import M from "styled-components";
import D from "@strapi/icons/CarretDown";
import { NumberParser as W, NumberFormatter as X } from "@internationalized/number";
import { Field as Y } from "../Field/Field.js";
import { FieldLabel as G } from "../Field/FieldLabel.js";
import { FieldInput as J } from "../Field/FieldInput.js";
import { FieldHint as Q } from "../Field/FieldHint.js";
import { FieldError as Z } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Stack as ee } from "../Stack/Stack.js";
import { Icon as F } from "../Icon/Icon.js";
import { sizes as re } from "../themes/sizes.js";
import { useId as te } from "../helpers/useId.js";
import { KeyboardKeys as k } from "../helpers/keyboardKeys.js";
import { getDefaultLocale as oe } from "../helpers/getDefaultLocale.js";
import { useControllableState as ne } from "../hooks/useControllableState.js";
const C = M.button`
  display: flex;
  height: 1rem;
  align-items: ${({ reverse: e }) => e ? "flex-end" : "flex-start"};
  transform: translateY(${({ reverse: e }) => e ? "-2px" : "2px"});
  cursor: ${({ disabled: e }) => e ? "not-allowed" : void 0};
  svg {
    display: block;
    height: ${4 / 16}rem;
    transform: ${({ reverse: e }) => e ? "rotateX(180deg)" : void 0};
  }
`, ae = "", b = a.forwardRef(
  (ie, T) => {
    var v = ie, {
      size: e,
      startAction: n,
      name: o,
      hint: l,
      error: P,
      label: g,
      labelAction: R,
      locale: O,
      id: S,
      onValueChange: $,
      value: q,
      step: s,
      required: K,
      disabled: d
    } = v, L = V(v, [
      "size",
      "startAction",
      "name",
      "hint",
      "error",
      "label",
      "labelAction",
      "locale",
      "id",
      "onValueChange",
      "value",
      "step",
      "required",
      "disabled"
    ]);
    const z = te("numberinput", S), N = O || oe(), c = x(new W(N, { style: "decimal" })), f = x(new X(N, { maximumFractionDigits: 20 })), [m, B] = ne({
      prop(r) {
        const i = String(q);
        return isNaN(i) || i !== r && r !== "" ? r : i;
      },
      defaultProp: ae,
      onChange(r) {
        const i = c.current.parse(r);
        $(isNaN(i) ? void 0 : i);
      }
    }), u = (r) => {
      B(String(r));
    }, U = ({ target: { value: r } }) => {
      c.current.isValidPartialNumber(r) && u(r);
    }, y = () => {
      if (!m) {
        u(s);
        return;
      }
      const r = c.current.parse(m), i = isNaN(r) ? s : r + s;
      u(f.current.format(i));
    }, h = () => {
      if (!m) {
        u(-s);
        return;
      }
      const r = c.current.parse(m), i = isNaN(r) ? -s : r - s;
      u(f.current.format(i));
    }, _ = (r) => {
      if (!d)
        switch (r.key) {
          case k.DOWN: {
            r.preventDefault(), h();
            break;
          }
          case k.UP: {
            r.preventDefault(), y();
            break;
          }
        }
    }, j = () => {
      if (m) {
        const r = c.current.parse(m), i = isNaN(r) ? "" : f.current.format(r);
        u(i);
      }
    };
    return /* @__PURE__ */ a.createElement(Y, {
      name: o,
      hint: l,
      error: P,
      id: z,
      required: K
    }, /* @__PURE__ */ a.createElement(ee, {
      spacing: 1
    }, g && /* @__PURE__ */ a.createElement(G, {
      action: R
    }, g), /* @__PURE__ */ a.createElement(J, A({
      ref: T,
      startAction: n,
      disabled: d,
      type: "text",
      inputmode: "decimal",
      onChange: U,
      onKeyDown: _,
      onBlur: j,
      value: m,
      size: e,
      endAction: /* @__PURE__ */ a.createElement(a.Fragment, null, /* @__PURE__ */ a.createElement(C, {
        disabled: d,
        "aria-hidden": !0,
        reverse: !0,
        onClick: y,
        tabIndex: -1,
        type: "button",
        "data-testid": "ArrowUp"
      }, /* @__PURE__ */ a.createElement(F, {
        as: D,
        color: "neutral500"
      })), /* @__PURE__ */ a.createElement(C, {
        disabled: d,
        "aria-hidden": !0,
        onClick: h,
        tabIndex: -1,
        type: "button",
        "data-testid": "ArrowDown"
      }, /* @__PURE__ */ a.createElement(F, {
        as: D,
        color: "neutral500"
      })))
    }, L)), /* @__PURE__ */ a.createElement(Q, null), /* @__PURE__ */ a.createElement(Z, null)));
  }
);
b.displayName = "NumberInput";
b.defaultProps = {
  "aria-label": void 0,
  disabled: !1,
  error: void 0,
  hint: void 0,
  id: void 0,
  label: void 0,
  labelAction: void 0,
  locale: void 0,
  required: !1,
  size: "M",
  startAction: void 0,
  step: 1,
  value: void 0
};
b.propTypes = {
  "aria-label": t.string,
  disabled: t.bool,
  error: t.string,
  hint: t.oneOfType([t.string, t.node, t.arrayOf(t.node)]),
  id: t.string,
  label: t.string,
  labelAction: t.element,
  locale: t.string,
  name: t.string.isRequired,
  onValueChange: t.func.isRequired,
  required: t.bool,
  size: t.oneOf(Object.keys(re.input)),
  startAction: t.element,
  step: t.number,
  value: t.number
};
export {
  b as NumberInput
};
