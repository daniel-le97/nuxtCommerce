var x = Object.defineProperty;
var i = Object.getOwnPropertySymbols;
var c = Object.prototype.hasOwnProperty, m = Object.prototype.propertyIsEnumerable;
var s = (r, o, e) => o in r ? x(r, o, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[o] = e, g = (r, o) => {
  for (var e in o || (o = {}))
    c.call(o, e) && s(r, e, o[e]);
  if (i)
    for (var e of i(o))
      m.call(o, e) && s(r, e, o[e]);
  return r;
};
var n = (r, o) => {
  var e = {};
  for (var t in r)
    c.call(r, t) && o.indexOf(t) < 0 && (e[t] = r[t]);
  if (r != null && i)
    for (var t of i(r))
      o.indexOf(t) < 0 && m.call(r, t) && (e[t] = r[t]);
  return e;
};
import a from "react";
import l from "prop-types";
import f from "styled-components";
import { Typography as $ } from "../Typography/Typography.js";
import { Box as h } from "../Box/Box.js";
import { Flex as u } from "../Flex/Flex.js";
const k = f(h)`
  svg {
    height: ${8 / 16}rem;
    width: ${8 / 16}rem;
  }

  svg path {
    fill: ${(e) => {
  var t = e, { theme: r } = t, o = n(t, ["theme"]);
  return o["aria-disabled"] ? r.colors.neutral600 : r.colors.primary600;
}};
  }
`, C = f($)`
  border-right: 1px solid ${({ theme: r, disabled: o }) => o ? r.colors.neutral300 : r.colors.primary200};
  color: inherit;
  padding-right: ${({ theme: r }) => r.spaces[2]};
`, p = (E) => {
  var d = E, { children: r, icon: o, disabled: e, onClick: t } = d, y = n(d, ["children", "icon", "disabled", "onClick"]);
  const T = (b) => {
    e || t(b);
  };
  return /* @__PURE__ */ a.createElement(k, g({
    as: "button",
    background: e ? "neutral200" : "primary100",
    color: e ? "neutral700" : "primary600",
    paddingLeft: 3,
    paddingRight: 3,
    onClick: T,
    "aria-disabled": e,
    borderWidth: "1px",
    borderStyle: "solid",
    borderColor: e ? "neutral300" : "primary200",
    hasRadius: !0,
    height: `${32 / 16}rem`
  }, y), /* @__PURE__ */ a.createElement(u, null, /* @__PURE__ */ a.createElement(C, {
    disabled: e,
    variant: "pi",
    fontWeight: "bold",
    as: "span"
  }, r), /* @__PURE__ */ a.createElement(h, {
    paddingLeft: 2
  }, /* @__PURE__ */ a.createElement(u, null, o))));
};
p.displayName = "Tag";
p.defaultProps = {
  disabled: !1,
  onClick: void 0
};
p.propTypes = {
  children: l.node.isRequired,
  disabled: l.bool,
  icon: l.element.isRequired,
  onClick: l.func
};
export {
  p as Tag
};
