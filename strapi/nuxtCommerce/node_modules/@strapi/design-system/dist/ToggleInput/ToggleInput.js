var C = Object.defineProperty;
var n = Object.getOwnPropertySymbols;
var u = Object.prototype.hasOwnProperty, b = Object.prototype.propertyIsEnumerable;
var g = (e, t, r) => t in e ? C(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, E = (e, t) => {
  for (var r in t || (t = {}))
    u.call(t, r) && g(e, r, t[r]);
  if (n)
    for (var r of n(t))
      b.call(t, r) && g(e, r, t[r]);
  return e;
};
var x = (e, t) => {
  var r = {};
  for (var i in e)
    u.call(e, i) && t.indexOf(i) < 0 && (r[i] = e[i]);
  if (e != null && n)
    for (var i of n(e))
      t.indexOf(i) < 0 && b.call(e, i) && (r[i] = e[i]);
  return r;
};
import l from "react";
import y from "styled-components";
import o from "prop-types";
import { sizes as I } from "../themes/sizes.js";
import { useId as O } from "../helpers/useId.js";
import { Field as z } from "../Field/Field.js";
import { FieldLabel as q } from "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { FieldHint as A } from "../Field/FieldHint.js";
import { FieldError as B } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Stack as L } from "../Stack/Stack.js";
import { Flex as P } from "../Flex/Flex.js";
import { TextButton as _ } from "../TextButton/TextButton.js";
import { ToggleCheckbox as j } from "../ToggleCheckbox/ToggleCheckbox.js";
const w = y(z)`
  max-width: 320px;
`, H = y(_)`
  align-self: flex-end;
  margin-left: auto;
`, m = (M) => {
  var c = M, {
    disabled: e,
    size: t,
    error: r,
    hint: i,
    label: a,
    name: T,
    labelAction: v,
    required: F,
    id: h,
    onClear: p,
    clearLabel: d,
    checked: s
  } = c, k = x(c, [
    "disabled",
    "size",
    "error",
    "hint",
    "label",
    "name",
    "labelAction",
    "required",
    "id",
    "onClear",
    "clearLabel",
    "checked"
  ]);
  const f = O("toggleinput", h);
  return /* @__PURE__ */ l.createElement(w, {
    name: T,
    hint: i,
    error: r,
    id: f,
    required: F
  }, /* @__PURE__ */ l.createElement(L, {
    spacing: 1
  }, /* @__PURE__ */ l.createElement(P, null, /* @__PURE__ */ l.createElement(q, {
    action: v
  }, a), d && p && s !== null && !e && /* @__PURE__ */ l.createElement(H, {
    onClick: p
  }, d)), /* @__PURE__ */ l.createElement(j, E({
    id: f,
    size: t,
    checked: s,
    disabled: e
  }, k), a), /* @__PURE__ */ l.createElement(A, null), /* @__PURE__ */ l.createElement(B, null)));
};
m.displayName = "ToggleInput";
m.defaultProps = {
  checked: !1,
  clearLabel: void 0,
  disabled: !1,
  error: void 0,
  hint: void 0,
  id: void 0,
  label: "",
  labelAction: void 0,
  name: "",
  onClear: void 0,
  required: !1,
  size: "M"
};
m.propTypes = {
  checked: o.bool,
  clearLabel: o.string,
  disabled: o.bool,
  error: o.string,
  hint: o.oneOfType([o.string, o.node, o.arrayOf(o.node)]),
  id: o.string,
  label: o.string,
  labelAction: o.node,
  name: o.string,
  onClear: o.func,
  required: o.bool,
  size: o.oneOf(Object.keys(I.input))
};
export {
  m as ToggleInput
};
