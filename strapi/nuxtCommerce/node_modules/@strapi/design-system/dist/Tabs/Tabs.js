var P = Object.defineProperty;
var v = Object.getOwnPropertySymbols;
var k = Object.prototype.hasOwnProperty, w = Object.prototype.propertyIsEnumerable;
var E = (e, t, a) => t in e ? P(e, t, { enumerable: !0, configurable: !0, writable: !0, value: a }) : e[t] = a, y = (e, t) => {
  for (var a in t || (t = {}))
    k.call(t, a) && E(e, a, t[a]);
  if (v)
    for (var a of v(t))
      w.call(t, a) && E(e, a, t[a]);
  return e;
};
var C = (e, t) => {
  var a = {};
  for (var o in e)
    k.call(e, o) && t.indexOf(o) < 0 && (a[o] = e[o]);
  if (e != null && v)
    for (var o of v(e))
      t.indexOf(o) < 0 && w.call(e, o) && (a[o] = e[o]);
  return a;
};
import c, { Children as A, cloneElement as N } from "react";
import d from "prop-types";
import O from "styled-components";
import { useTabs as $ } from "./TabsContext.js";
import { Typography as R } from "../Typography/Typography.js";
import { KeyboardKeys as g } from "../helpers/keyboardKeys.js";
import { useTabsFocus as W } from "./useTabsFocus.js";
import { DefaultTabsRow as q, SimpleTabBox as F, DefaultTabButton as H, DefaultTabBox as _ } from "./components.js";
const G = O.button`
  &[aria-disabled='true'] {
    cursor: not-allowed;
  }
`, L = (a) => {
  var o = a, { children: e } = o, t = C(o, ["children"]);
  const { id: f, selectedTabIndex: p, selectTabIndex: b, label: I, variant: x, onTabChange: D } = $(), h = W(p, D), i = A.toArray(e).map(
    (r, m) => N(r, {
      id: `${f}-${m}`,
      index: m,
      selectedTabIndex: p,
      onTabClick: () => b(m),
      variant: x
    })
  ), T = (r) => {
    if (!i.every((l) => l.props.disabled))
      switch (r.key) {
        case g.RIGHT: {
          const l = p + 1, n = (s) => i[s].props.disabled ? s === i.length - 1 ? n(0) : n(s + 1) : s, u = n(l >= i.length ? 0 : l);
          b(u);
          break;
        }
        case g.LEFT: {
          const l = p - 1, n = (s) => i[s].props.disabled ? n(s === 0 ? i.length - 1 : s - 1) : s, u = n(l < 0 ? i.length - 1 : l);
          b(u);
          break;
        }
        case g.HOME: {
          const l = i.findIndex((n) => !n.props.disabled);
          b(l);
          break;
        }
        case g.END: {
          const n = i.map((u, s) => ({ isDisabled: u.props.disabled, index: s })).reverse().find(({ isDisabled: u }) => !u);
          n && b(n.index);
          break;
        }
      }
  };
  return x === "simple" ? /* @__PURE__ */ c.createElement("div", y({
    ref: h,
    role: "tablist",
    "aria-label": I,
    onKeyDown: T
  }, t), i) : /* @__PURE__ */ c.createElement(q, y({
    ref: h,
    role: "tablist",
    alignItems: "flex-end",
    "aria-label": I,
    onKeyDown: T
  }, t), i);
};
L.propTypes = {
  children: d.node.isRequired
};
const B = (D) => {
  var h = D, { disabled: e, id: t, children: a, variant: o, hasError: f, index: p, selectedTabIndex: b, onTabClick: I } = h, x = C(h, ["disabled", "id", "children", "variant", "hasError", "index", "selectedTabIndex", "onTabClick"]);
  const i = `${t}-tab`, T = `${t}-tabpanel`, r = p === b, m = () => {
    e || I();
  };
  if (o === "simple") {
    let n;
    return f ? n = "danger600" : r ? n = "primary600" : n = "neutral600", /* @__PURE__ */ c.createElement(G, y({
      id: i,
      role: "tab",
      "aria-controls": r ? T : void 0,
      tabIndex: r ? 0 : -1,
      "aria-selected": r,
      type: "button",
      onClick: m,
      "aria-disabled": e
    }, x), /* @__PURE__ */ c.createElement(F, {
      padding: 4,
      selected: r,
      hasError: f
    }, /* @__PURE__ */ c.createElement(R, {
      variant: "sigma",
      textColor: n
    }, a)));
  }
  f && console.warn('The "hasError" prop is only available for the "simple" variant.');
  const l = b - 1 === p;
  return /* @__PURE__ */ c.createElement(H, y({
    id: i,
    role: "tab",
    type: "button",
    "aria-controls": r ? T : void 0,
    tabIndex: r ? 0 : -1,
    "aria-selected": r,
    onClick: m,
    "aria-disabled": e,
    showRightBorder: l
  }, x), /* @__PURE__ */ c.createElement(_, {
    padding: r ? 4 : 3,
    background: r ? "neutral0" : "neutral100",
    selected: r
  }, /* @__PURE__ */ c.createElement(R, {
    fontWeight: "bold",
    textColor: r ? "primary700" : "neutral600"
  }, a)));
};
B.defaultProps = {
  disabled: !1,
  hasError: !1,
  id: void 0,
  index: void 0,
  onTabClick: void 0,
  selectedTabIndex: void 0,
  variant: void 0
};
B.propTypes = {
  children: d.node.isRequired,
  disabled: d.bool,
  hasError: d.bool,
  id: d.string,
  index: d.number,
  onTabClick: d.func,
  selectedTabIndex: d.number,
  variant: d.oneOf(["simple"])
};
export {
  B as Tab,
  L as Tabs
};
