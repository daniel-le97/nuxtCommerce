var P = Object.defineProperty;
var n = Object.getOwnPropertySymbols;
var b = Object.prototype.hasOwnProperty, m = Object.prototype.propertyIsEnumerable;
var c = (e, t, r) => t in e ? P(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, i = (e, t) => {
  for (var r in t || (t = {}))
    b.call(t, r) && c(e, r, t[r]);
  if (n)
    for (var r of n(t))
      m.call(t, r) && c(e, r, t[r]);
  return e;
};
var p = (e, t) => {
  var r = {};
  for (var a in e)
    b.call(e, a) && t.indexOf(a) < 0 && (r[a] = e[a]);
  if (e != null && n)
    for (var a of n(e))
      t.indexOf(a) < 0 && m.call(e, a) && (r[a] = e[a]);
  return r;
};
import T, { Children as I, cloneElement as $ } from "react";
import f from "prop-types";
import { useTabs as h } from "./TabsContext.js";
const v = (r) => {
  var a = r, { children: e } = a, t = p(a, ["children"]);
  const { id: o, selectedTabIndex: d } = h(), y = I.toArray(e).map((s, l) => $(s, { id: `${o}-${l}` })).filter((s, l) => l === d);
  return /* @__PURE__ */ T.createElement("div", i({}, t), y);
};
v.propTypes = {
  children: f.node.isRequired
};
const u = (r) => {
  var a = r, { id: e } = a, t = p(a, ["id"]);
  const o = `${e}-tab`, d = `${e}-tabpanel`;
  return /* @__PURE__ */ T.createElement("div", i({
    id: d,
    role: "tabpanel",
    tabIndex: 0,
    "aria-labelledby": o
  }, t));
};
u.defaultProps = {
  id: void 0
};
u.propTypes = {
  id: f.string
};
export {
  u as TabPanel,
  v as TabPanels
};
