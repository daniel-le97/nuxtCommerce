var x = Object.defineProperty;
var l = Object.getOwnPropertySymbols;
var d = Object.prototype.hasOwnProperty, p = Object.prototype.propertyIsEnumerable;
var s = (e, o, r) => o in e ? x(e, o, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[o] = r, u = (e, o) => {
  for (var r in o || (o = {}))
    d.call(o, r) && s(e, r, o[r]);
  if (l)
    for (var r of l(o))
      p.call(o, r) && s(e, r, o[r]);
  return e;
};
var m = (e, o) => {
  var r = {};
  for (var t in e)
    d.call(e, t) && o.indexOf(t) < 0 && (r[t] = e[t]);
  if (e != null && l)
    for (var t of l(e))
      o.indexOf(t) < 0 && p.call(e, t) && (r[t] = e[t]);
  return r;
};
import b, { useRef as $, useEffect as y } from "react";
import a from "prop-types";
import C from "styled-components";
import { Box as w } from "../Box/Box.js";
import { getCheckboxSize as f } from "./utils.js";
import R from "./assets/checkmark.js";
import v from "./assets/checkmark-black.js";
const z = C.input`
  margin: 0;
  height: ${f};
  min-width: ${f};
  border-radius: ${({ theme: e }) => e.borderRadius};
  border: 1px solid ${({ theme: e }) => e.colors.neutral300};
  -webkit-appearance: none;
  background-color: ${({ theme: e }) => e.colors.neutral0};
  cursor: pointer;

  &:checked {
    background-color: ${({ theme: e }) => e.colors.primary600};
    border: 1px solid ${({ theme: e }) => e.colors.primary600};

    &:after {
      content: '';
      display: block;
      position: relative;
      background: url(${R}) no-repeat no-repeat center center;
      width: 10px;
      height: 10px;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
    }

    &:disabled:after {
      background: url(${v}) no-repeat no-repeat center center;
    }
  }

  &:disabled {
    background-color: ${({ theme: e }) => e.colors.neutral200};
    border: 1px solid ${({ theme: e }) => e.colors.neutral300};
  }

  &:indeterminate {
    background-color: ${({ theme: e }) => e.colors.primary600};
    border: 1px solid ${({ theme: e }) => e.colors.primary600};

    &:after {
      content: '';
      display: block;
      position: relative;
      color: white;
      height: 2px;
      width: 10px;
      background-color: ${({ theme: e }) => e.colors.neutral0};
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
    }

    &:disabled {
      background-color: ${({ theme: e }) => e.colors.neutral200};
      border: 1px solid ${({ theme: e }) => e.colors.neutral300};
      &:after {
        background-color: ${({ theme: e }) => e.colors.neutral500};
      }
    }
  }
`, c = (B) => {
  var i = B, { indeterminate: e, size: o, name: r, value: t, onValueChange: h } = i, k = m(i, ["indeterminate", "size", "name", "value", "onValueChange"]);
  const n = $();
  y(() => {
    n.current && e ? n.current.indeterminate = e : n.current.indeterminate = !1;
  }, [e]);
  const g = () => {
    h(!t);
  };
  return /* @__PURE__ */ b.createElement(w, null, /* @__PURE__ */ b.createElement(z, u({
    size: o,
    checked: t,
    onChange: g,
    type: "checkbox",
    ref: n,
    name: r
  }, k)));
};
c.displayName = "BaseCheckbox";
c.defaultProps = {
  indeterminate: !1,
  name: null,
  onValueChange() {
  },
  size: "M",
  value: !1
};
c.propTypes = {
  indeterminate: a.bool,
  name: a.string,
  onValueChange: a.func,
  size: a.oneOf(["M", "L"]),
  value: a.bool
};
export {
  c as BaseCheckbox
};
