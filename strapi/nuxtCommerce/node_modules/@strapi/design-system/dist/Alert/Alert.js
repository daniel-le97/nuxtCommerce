var y = Object.defineProperty;
var s = Object.getOwnPropertySymbols;
var h = Object.prototype.hasOwnProperty, E = Object.prototype.propertyIsEnumerable;
var u = (e, r, t) => r in e ? y(e, r, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[r] = t, i = (e, r) => {
  for (var t in r || (r = {}))
    h.call(r, t) && u(e, t, r[t]);
  if (s)
    for (var t of s(r))
      E.call(r, t) && u(e, t, r[t]);
  return e;
};
var m = (e, r) => {
  var t = {};
  for (var n in e)
    h.call(e, n) && r.indexOf(n) < 0 && (t[n] = e[n]);
  if (e != null && s)
    for (var n of s(e))
      r.indexOf(n) < 0 && E.call(e, n) && (t[n] = e[n]);
  return t;
};
import o from "react";
import a from "prop-types";
import d from "styled-components";
import B from "@strapi/icons/Information";
import A from "@strapi/icons/CheckCircle";
import k from "@strapi/icons/ExclamationMarkCircle";
import w from "@strapi/icons/Cross";
import { Box as l } from "../Box/Box.js";
import { Typography as x } from "../Typography/Typography.js";
import { Flex as T } from "../Flex/Flex.js";
import { handleBorderColor as q, handleBackgroundColor as I, handleIconColor as c } from "./utils.js";
import { buttonFocusStyle as v } from "../themes/utils.js";
const W = d(l)`
  flex: 1;
  flex-wrap: wrap;
  display: flex;
  flex-direction: row;
`, z = d(l)`
  border: 1px solid ${q};
  background: ${I};
  box-shadow: ${({ theme: e }) => e.shadows.filterShadow};
`, F = d.button`
  border: none;
  background: transparent;
  font-size: ${12 / 16}rem;
  svg path {
    fill: ${({ theme: e }) => e.colors.neutral700};
  }
  margin-top: ${({ theme: e }) => e.spaces[1]};
  ${v};
`, L = d(l)`
  font-size: ${20 / 16}rem;
  svg path {
    fill: ${c};
  }
`, C = (t) => {
  var n = t, { variant: e } = n, r = m(n, ["variant"]);
  return e === "success" ? /* @__PURE__ */ o.createElement(A, i({}, r)) : e === "danger" ? /* @__PURE__ */ o.createElement(k, i({}, r)) : /* @__PURE__ */ o.createElement(B, i({}, r));
}, P = d(l)`
  // Checked with the designers, validated
  padding-top: 1px;

  & a > span {
    color: ${c};

    svg path {
      fill: ${c};
    }
  }
`, f = (S) => {
  var g = S, { title: e, children: r, variant: t, onClose: n, closeLabel: R, titleAs: $, action: p } = g, b = m(g, ["title", "children", "variant", "onClose", "closeLabel", "titleAs", "action"]);
  return /* @__PURE__ */ o.createElement(z, i({
    hasRadius: !0,
    paddingLeft: 5,
    paddingRight: 6,
    paddingTop: 5,
    variant: t
  }, b), /* @__PURE__ */ o.createElement(T, {
    alignItems: "flex-start"
  }, /* @__PURE__ */ o.createElement(L, {
    paddingRight: 3,
    variant: t
  }, /* @__PURE__ */ o.createElement(C, {
    variant: t,
    "aria-hidden": !0
  })), /* @__PURE__ */ o.createElement(W, {
    role: t === "danger" ? "alert" : "status"
  }, /* @__PURE__ */ o.createElement(l, {
    paddingBottom: 2,
    paddingRight: 1
  }, /* @__PURE__ */ o.createElement(x, {
    fontWeight: "bold",
    textColor: "neutral800",
    as: $
  }, e)), /* @__PURE__ */ o.createElement(l, {
    paddingBottom: p ? 2 : 5,
    paddingRight: 2
  }, /* @__PURE__ */ o.createElement(x, {
    as: "p",
    textColor: "neutral800"
  }, r)), p && /* @__PURE__ */ o.createElement(P, {
    paddingBottom: 5,
    variant: t
  }, p)), /* @__PURE__ */ o.createElement(F, {
    onClick: n,
    "aria-label": R
  }, /* @__PURE__ */ o.createElement(w, {
    "aria-hidden": !0
  }))));
};
f.defaultProps = {
  action: void 0,
  variant: "default",
  titleAs: "p"
};
f.propTypes = {
  action: a.element,
  children: a.node.isRequired,
  closeLabel: a.string.isRequired,
  onClose: a.func.isRequired,
  title: a.string.isRequired,
  titleAs: a.string,
  variant: a.oneOf(["danger", "success", "default"])
};
C.propTypes = {
  variant: f.propTypes.variant.isRequired
};
export {
  f as Alert
};
