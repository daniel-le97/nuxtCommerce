var F = Object.defineProperty;
var a = Object.getOwnPropertySymbols;
var u = Object.prototype.hasOwnProperty, b = Object.prototype.propertyIsEnumerable;
var f = (e, i, r) => i in e ? F(e, i, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[i] = r, v = (e, i) => {
  for (var r in i || (i = {}))
    u.call(i, r) && f(e, r, i[r]);
  if (a)
    for (var r of a(i))
      b.call(i, r) && f(e, r, i[r]);
  return e;
};
var E = (e, i) => {
  var r = {};
  for (var o in e)
    u.call(e, o) && i.indexOf(o) < 0 && (r[o] = e[o]);
  if (e != null && a)
    for (var o of a(e))
      i.indexOf(o) < 0 && b.call(e, o) && (r[o] = e[o]);
  return r;
};
import n, { useRef as O, useImperativeHandle as R } from "react";
import t from "prop-types";
import { Field as h } from "../Field/Field.js";
import { FieldLabel as q } from "../Field/FieldLabel.js";
import { FieldInput as w } from "../Field/FieldInput.js";
import { FieldHint as z } from "../Field/FieldHint.js";
import { FieldError as k } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Stack as H } from "../Stack/Stack.js";
import { sizes as P } from "../themes/sizes.js";
import { useId as _ } from "../helpers/useId.js";
const m = n.forwardRef(
  (j, d) => {
    var s = j, { size: e, startAction: i, endAction: r, name: o, hint: g, error: T, label: l, labelAction: y, id: I, required: A } = s, p = E(s, ["size", "startAction", "endAction", "name", "hint", "error", "label", "labelAction", "id", "required"]);
    const x = _("textinput", I), c = O(null);
    if (!l && !p["aria-label"])
      throw new Error('The TextInput component needs a "label" or an "aria-label" props');
    return R(d, () => ({
      inputWrapperRef: c
    })), /* @__PURE__ */ n.createElement("div", {
      ref: c
    }, /* @__PURE__ */ n.createElement(h, {
      name: o,
      hint: g,
      error: T,
      id: x,
      required: A
    }, /* @__PURE__ */ n.createElement(H, {
      spacing: 1
    }, l && /* @__PURE__ */ n.createElement(q, {
      action: y
    }, l), /* @__PURE__ */ n.createElement(w, v({
      size: e,
      ref: d,
      startAction: i,
      endAction: r
    }, p)), /* @__PURE__ */ n.createElement(z, null), /* @__PURE__ */ n.createElement(k, null))));
  }
);
m.displayName = "TextInput";
m.defaultProps = {
  "aria-label": void 0,
  label: void 0,
  labelAction: void 0,
  error: void 0,
  hint: void 0,
  id: void 0,
  startAction: void 0,
  size: "M",
  endAction: void 0,
  required: !1
};
m.propTypes = {
  "aria-label": t.string,
  endAction: t.element,
  error: t.oneOfType([t.string, t.bool]),
  hint: t.oneOfType([t.string, t.node, t.arrayOf(t.node)]),
  id: t.string,
  label: t.string,
  labelAction: t.element,
  name: t.string.isRequired,
  required: t.bool,
  size: t.oneOf(Object.keys(P.input)),
  startAction: t.element
};
export {
  m as TextInput
};
