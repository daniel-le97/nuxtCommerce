var k = Object.defineProperty;
var s = Object.getOwnPropertySymbols;
var g = Object.prototype.hasOwnProperty, $ = Object.prototype.propertyIsEnumerable;
var u = (e, o, r) => o in e ? k(e, o, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[o] = r, c = (e, o) => {
  for (var r in o || (o = {}))
    g.call(o, r) && u(e, r, o[r]);
  if (s)
    for (var r of s(o))
      $.call(o, r) && u(e, r, o[r]);
  return e;
};
var f = (e, o) => {
  var r = {};
  for (var t in e)
    g.call(e, t) && o.indexOf(t) < 0 && (r[t] = e[t]);
  if (e != null && s)
    for (var t of s(e))
      o.indexOf(t) < 0 && $.call(e, t) && (r[t] = e[t]);
  return r;
};
import a from "react";
import l from "styled-components";
import n from "prop-types";
import { NavLink as N } from "react-router-dom";
import { Box as R } from "../Box/Box.js";
import { Flex as E } from "../Flex/Flex.js";
import { Typography as i } from "../Typography/Typography.js";
import { useMainNav as x } from "./MainNavContext.js";
import { Tooltip as L } from "../Tooltip/Tooltip.js";
import { Badge as w } from "../Badge/Badge.js";
const h = l(R)`
  svg {
    width: 1rem;
    height: 1rem;
  }
`, v = l(N)`
  position: relative;
  text-decoration: none;
  display: block;
  border-radius: ${({ theme: e }) => e.borderRadius};
  background: ${({ theme: e }) => e.colors.neutral0};

  ${i} {
    color: ${({ theme: e }) => e.colors.neutral600};
  }

  svg path {
    fill: ${({ theme: e }) => e.colors.neutral500};
  }

  &:hover {
    background: ${({ theme: e }) => e.colors.neutral100};

    ${i} {
      color: ${({ theme: e }) => e.colors.neutral700};
    }

    svg path {
      fill: ${({ theme: e }) => e.colors.neutral600};
    }
  }

  &.active {
    background: ${({ theme: e }) => e.colors.primary100};

    svg path {
      fill: ${({ theme: e }) => e.colors.primary600};
    }

    ${i} {
      color: ${({ theme: e }) => e.colors.primary600};
      font-weight: 500;
    }
  }
`, y = l(E)`
  padding: ${({ theme: e }) => `${e.spaces[2]} ${e.spaces[3]}`};
`, b = l(w)`
  ${({ condensed: e }) => e && `
	  position: absolute;
    transform: translate(35%, -50%);
    top: 0;
    right: 0;
  `}

  ${i} {
    //find a solution to remove !important
    color: ${({ theme: e }) => e.colors.neutral0} !important;
    line-height: 0;
  }

  display: flex;
  justify-content: center;
  align-items: center;
  min-width: ${({ theme: e }) => e.spaces[6]};
  height: ${({ theme: e }) => e.spaces[5]};
  padding: ${({ theme: e }) => `0 ${e.spaces[2]}`};
  border-radius: ${({ theme: e }) => e.spaces[10]};
  background: ${({ theme: e }) => e.colors.primary600};
`, p = (T) => {
  var m = T, { children: e, icon: o, badgeContent: r, badgeAriaLabel: t } = m, d = f(m, ["children", "icon", "badgeContent", "badgeAriaLabel"]);
  return x() ? /* @__PURE__ */ a.createElement(L, {
    position: "right",
    label: e
  }, /* @__PURE__ */ a.createElement(v, c({}, d), /* @__PURE__ */ a.createElement(y, {
    as: "span"
  }, /* @__PURE__ */ a.createElement(h, {
    "aria-hidden": !0,
    paddingRight: 0,
    as: "span"
  }, o), r && /* @__PURE__ */ a.createElement(b, {
    condensed: !0,
    "aria-label": t
  }, r)))) : /* @__PURE__ */ a.createElement(v, c({}, d), /* @__PURE__ */ a.createElement(y, {
    as: "span",
    justifyContent: "space-between"
  }, /* @__PURE__ */ a.createElement(E, null, /* @__PURE__ */ a.createElement(h, {
    "aria-hidden": !0,
    paddingRight: 3,
    as: "span"
  }, o), /* @__PURE__ */ a.createElement(i, null, e)), r && /* @__PURE__ */ a.createElement(b, {
    justifyContent: "center",
    "aria-label": t
  }, r)));
};
p.displayName = "NavLink";
p.defaultProps = {
  badgeContent: void 0,
  badgeAriaLabel: void 0
};
p.propTypes = {
  badgeAriaLabel: n.string,
  badgeContent: n.oneOfType([n.string, n.number]),
  children: n.node.isRequired,
  icon: n.node.isRequired
};
export {
  p as NavLink
};
