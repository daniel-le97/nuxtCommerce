var y = Object.defineProperty;
var n = Object.getOwnPropertySymbols;
var s = Object.prototype.hasOwnProperty, c = Object.prototype.propertyIsEnumerable;
var m = (e, t, o) => t in e ? y(e, t, { enumerable: !0, configurable: !0, writable: !0, value: o }) : e[t] = o, f = (e, t) => {
  for (var o in t || (t = {}))
    s.call(t, o) && m(e, o, t[o]);
  if (n)
    for (var o of n(t))
      c.call(t, o) && m(e, o, t[o]);
  return e;
};
var u = (e, t) => {
  var o = {};
  for (var r in e)
    s.call(e, r) && t.indexOf(r) < 0 && (o[r] = e[r]);
  if (e != null && n)
    for (var r of n(e))
      t.indexOf(r) < 0 && c.call(e, r) && (o[r] = e[r]);
  return o;
};
import i from "react";
import a from "prop-types";
import E from "styled-components";
import { Avatar as x, Initials as h } from "../Avatar/Avatar.js";
import "../Avatar/AvatarGroup.js";
import { Typography as N } from "../Typography/Typography.js";
import { Flex as b } from "../Flex/Flex.js";
import { Box as g } from "../Box/Box.js";
import { useMainNav as R } from "./MainNavContext.js";
import { VisuallyHidden as T } from "../VisuallyHidden/VisuallyHidden.js";
const w = E(g)`
  text-decoration: none;
  position: absolute;
  bottom: 0;
  width: 100%;
  border-top: 1px solid ${({ theme: e }) => e.colors.neutral150};
`, l = i.forwardRef((B, v) => {
  var d = B, { src: e, children: t, initials: o } = d, r = u(d, ["src", "children", "initials"]);
  const p = R();
  return /* @__PURE__ */ i.createElement(w, f({
    paddingTop: 3,
    paddingBottom: 3,
    paddingLeft: 5,
    paddingRight: 5
  }, r), /* @__PURE__ */ i.createElement(b, {
    as: "button",
    justifyContent: p ? "center" : void 0,
    ref: v
  }, e ? /* @__PURE__ */ i.createElement(x, {
    src: e,
    alt: "",
    "aria-hidden": !0
  }) : /* @__PURE__ */ i.createElement(h, null, o), p ? /* @__PURE__ */ i.createElement(T, null, /* @__PURE__ */ i.createElement("span", null, t)) : /* @__PURE__ */ i.createElement(g, {
    width: `${130 / 16}rem`,
    paddingLeft: 2,
    as: "span"
  }, /* @__PURE__ */ i.createElement(N, {
    ellipsis: !0,
    textColor: "neutral600"
  }, t))));
});
l.displayName = "NavUser";
l.defaultProps = {
  src: void 0,
  initials: void 0
};
l.propTypes = {
  children: a.node.isRequired,
  initials: a.node,
  src: a.string
};
export {
  l as NavUser
};
