var x = Object.defineProperty, C = Object.defineProperties;
var T = Object.getOwnPropertyDescriptors;
var i = Object.getOwnPropertySymbols;
var v = Object.prototype.hasOwnProperty, y = Object.prototype.propertyIsEnumerable;
var g = (r, e, o) => e in r ? x(r, e, { enumerable: !0, configurable: !0, writable: !0, value: o }) : r[e] = o, d = (r, e) => {
  for (var o in e || (e = {}))
    v.call(e, o) && g(r, o, e[o]);
  if (i)
    for (var o of i(e))
      y.call(e, o) && g(r, o, e[o]);
  return r;
}, c = (r, e) => C(r, T(e));
var k = (r, e) => {
  var o = {};
  for (var l in r)
    v.call(r, l) && e.indexOf(l) < 0 && (o[l] = r[l]);
  if (r != null && i)
    for (var l of i(r))
      e.indexOf(l) < 0 && y.call(r, l) && (o[l] = r[l]);
  return o;
};
import a, { cloneElement as B } from "react";
import n from "prop-types";
import I from "styled-components";
import { Tooltip as j } from "../Tooltip/Tooltip.js";
import { BaseButton as P } from "../BaseButton/BaseButton.js";
import { Flex as _ } from "../Flex/Flex.js";
import { VisuallyHidden as E } from "../VisuallyHidden/VisuallyHidden.js";
const u = I(P)`
  display: flex;
  align-items: center;
  justify-content: center;
  height: ${32 / 16}rem;
  width: ${32 / 16}rem;

  svg {
    > g,
    path {
      fill: ${({ theme: r }) => r.colors.neutral500};
    }
  }
  &:hover {
    svg {
      > g,
      path {
        fill: ${({ theme: r }) => r.colors.neutral600};
      }
    }
  }
  &:active {
    svg {
      > g,
      path {
        fill: ${({ theme: r }) => r.colors.neutral400};
      }
    }
  }
  &[aria-disabled='true'] {
    background-color: ${({ theme: r }) => r.colors.neutral150};
    svg {
      path {
        fill: ${({ theme: r }) => r.colors.neutral600};
      }
    }
  }
  ${({ noBorder: r }) => r ? "border: none;" : void 0}
`, z = I(_)`
  & span:first-child button {
    border-left: 1px solid ${({ theme: r }) => r.colors.neutral200};
    border-radius: ${({ theme: r }) => `${r.borderRadius} 0 0 ${r.borderRadius}`};
  }

  & span:last-child button {
    border-radius: ${({ theme: r }) => `0 ${r.borderRadius} ${r.borderRadius} 0`};
  }

  & ${u} {
    border-radius: 0;
    border-left: none;

    svg {
      path {
        fill: ${({ theme: r }) => r.colors.neutral700};
      }
    }

    &:hover {
      background-color: ${({ theme: r }) => r.colors.neutral100};

      svg {
        path {
          fill: ${({ theme: r }) => r.colors.neutral800};
        }
      }
    }

    &:active {
      background-color: ${({ theme: r }) => r.colors.neutral150};
      svg {
        path {
          fill: ${({ theme: r }) => r.colors.neutral900};
        }
      }
    }

    &[aria-disabled='true'] {
      svg {
        path {
          fill: ${({ theme: r }) => r.colors.neutral600};
        }
      }
    }
  }
`, f = a.forwardRef(
  (q, $) => {
    var h = q, { label: r, noBorder: e, children: o, icon: l, disabled: t, onClick: p, "aria-label": R } = h, b = k(h, ["label", "noBorder", "children", "icon", "disabled", "onClick", "aria-label"]);
    const m = (w) => {
      !t && p && p(w);
    };
    return r ? /* @__PURE__ */ a.createElement(j, {
      label: r
    }, /* @__PURE__ */ a.createElement(u, c(d({}, b), {
      ref: $,
      noBorder: e,
      onClick: m,
      "aria-disabled": t
    }), /* @__PURE__ */ a.createElement(E, {
      as: "span"
    }, r), B(l || o, {
      "aria-hidden": !0,
      focusable: !1
    }))) : /* @__PURE__ */ a.createElement(u, c(d({}, b), {
      ref: $,
      noBorder: e,
      onClick: m,
      "aria-disabled": t
    }), /* @__PURE__ */ a.createElement(E, {
      as: "span"
    }, R), B(l || o, {
      "aria-hidden": !0,
      focusable: !1
    }));
  }
);
f.displayName = "IconButton";
f.defaultProps = {
  "aria-label": void 0,
  children: void 0,
  disabled: !1,
  icon: void 0,
  label: void 0,
  noBorder: !1,
  onClick: void 0
};
const s = (r, e) => (o, l) => !o[l] && r.every((t) => !o[t]) ? new Error(`One of the following props is required: ${l}, ${r.join(", ")}`) : n.checkPropTypes({ [l]: n[e] }, o, "prop", "IconButton");
f.propTypes = {
  "aria-label": s(["label"], "string"),
  children: s(["icon"], "node"),
  disabled: n.bool,
  icon: s(["children"], "node"),
  label: s(["aria-label"], "string"),
  noBorder: n.bool,
  onClick: n.func
};
export {
  f as IconButton,
  z as IconButtonGroup
};
