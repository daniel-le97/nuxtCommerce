"use strict";var I=Object.defineProperty,R=Object.defineProperties;var x=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var m=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;var B=(e,o,l)=>o in e?I(e,o,{enumerable:!0,configurable:!0,writable:!0,value:l}):e[o]=l,u=(e,o)=>{for(var l in o||(o={}))m.call(o,l)&&B(e,l,o[l]);if(i)for(var l of i(o))E.call(o,l)&&B(e,l,o[l]);return e},c=(e,o)=>R(e,x(o));var T=(e,o)=>{var l={};for(var t in e)m.call(e,t)&&o.indexOf(t)<0&&(l[t]=e[t]);if(e!=null&&i)for(var t of i(e))o.indexOf(t)<0&&E.call(e,t)&&(l[t]=e[t]);return l};Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const f=require("react"),w=require("prop-types"),H=require("styled-components"),V=require("../Tooltip/Tooltip.cjs"),C=require("../BaseButton/BaseButton.cjs"),F=require("../Flex/Flex.cjs"),_=require("../VisuallyHidden/VisuallyHidden.cjs"),b=e=>e&&typeof e=="object"&&"default"in e?e:{default:e},r=b(f),n=b(w),j=b(H),p=j.default(C.BaseButton)`
  display: flex;
  align-items: center;
  justify-content: center;
  height: ${32/16}rem;
  width: ${32/16}rem;

  svg {
    > g,
    path {
      fill: ${({theme:e})=>e.colors.neutral500};
    }
  }
  &:hover {
    svg {
      > g,
      path {
        fill: ${({theme:e})=>e.colors.neutral600};
      }
    }
  }
  &:active {
    svg {
      > g,
      path {
        fill: ${({theme:e})=>e.colors.neutral400};
      }
    }
  }
  &[aria-disabled='true'] {
    background-color: ${({theme:e})=>e.colors.neutral150};
    svg {
      path {
        fill: ${({theme:e})=>e.colors.neutral600};
      }
    }
  }
  ${({noBorder:e})=>e?"border: none;":void 0}
`,P=j.default(F.Flex)`
  & span:first-child button {
    border-left: 1px solid ${({theme:e})=>e.colors.neutral200};
    border-radius: ${({theme:e})=>`${e.borderRadius} 0 0 ${e.borderRadius}`};
  }

  & span:last-child button {
    border-radius: ${({theme:e})=>`0 ${e.borderRadius} ${e.borderRadius} 0`};
  }

  & ${p} {
    border-radius: 0;
    border-left: none;

    svg {
      path {
        fill: ${({theme:e})=>e.colors.neutral700};
      }
    }

    &:hover {
      background-color: ${({theme:e})=>e.colors.neutral100};

      svg {
        path {
          fill: ${({theme:e})=>e.colors.neutral800};
        }
      }
    }

    &:active {
      background-color: ${({theme:e})=>e.colors.neutral150};
      svg {
        path {
          fill: ${({theme:e})=>e.colors.neutral900};
        }
      }
    }

    &[aria-disabled='true'] {
      svg {
        path {
          fill: ${({theme:e})=>e.colors.neutral600};
        }
      }
    }
  }
`,d=r.default.forwardRef((D,v)=>{var h=D,{label:e,noBorder:o,children:l,icon:t,disabled:a,onClick:$,"aria-label":k}=h,g=T(h,["label","noBorder","children","icon","disabled","onClick","aria-label"]);const y=q=>{!a&&$&&$(q)};return e?r.default.createElement(V.Tooltip,{label:e},r.default.createElement(p,c(u({},g),{ref:v,noBorder:o,onClick:y,"aria-disabled":a}),r.default.createElement(_.VisuallyHidden,{as:"span"},e),f.cloneElement(t||l,{"aria-hidden":!0,focusable:!1}))):r.default.createElement(p,c(u({},g),{ref:v,noBorder:o,onClick:y,"aria-disabled":a}),r.default.createElement(_.VisuallyHidden,{as:"span"},k),f.cloneElement(t||l,{"aria-hidden":!0,focusable:!1}))});d.displayName="IconButton";d.defaultProps={"aria-label":void 0,children:void 0,disabled:!1,icon:void 0,label:void 0,noBorder:!1,onClick:void 0};const s=(e,o)=>(l,t)=>!l[t]&&e.every(a=>!l[a])?new Error(`One of the following props is required: ${t}, ${e.join(", ")}`):n.default.checkPropTypes({[t]:n.default[o]},l,"prop","IconButton");d.propTypes={"aria-label":s(["label"],"string"),children:s(["icon"],"node"),disabled:n.default.bool,icon:s(["children"],"node"),label:s(["aria-label"],"string"),noBorder:n.default.bool,onClick:n.default.func};exports.IconButton=d;exports.IconButtonGroup=P;
