var f = Object.defineProperty;
var s = Object.getOwnPropertySymbols;
var i = Object.prototype.hasOwnProperty, l = Object.prototype.propertyIsEnumerable;
var p = (e, o, r) => o in e ? f(e, o, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[o] = r, n = (e, o) => {
  for (var r in o || (o = {}))
    i.call(o, r) && p(e, r, o[r]);
  if (s)
    for (var r of s(o))
      l.call(o, r) && p(e, r, o[r]);
  return e;
};
var u = (e, o) => {
  var r = {};
  for (var t in e)
    i.call(e, t) && o.indexOf(t) < 0 && (r[t] = e[t]);
  if (e != null && s)
    for (var t of s(e))
      o.indexOf(t) < 0 && l.call(e, t) && (r[t] = e[t]);
  return r;
};
import c from "react";
import b from "prop-types";
import m from "styled-components";
import { buttonFocusStyle as $ } from "../themes/utils.js";
const y = m.button`
  display: flex;
  cursor: pointer;
  padding: ${({ theme: e }) => e.spaces[2]};
  border-radius: ${({ theme: e }) => e.borderRadius};
  background: ${({ theme: e }) => e.colors.neutral0};
  border: 1px solid ${({ theme: e }) => e.colors.neutral200};
  svg {
    height: ${({ theme: e }) => e.spaces[3]};
    width: ${({ theme: e }) => e.spaces[3]};
  }
  svg {
    > g,
    path {
      fill: ${({ theme: e }) => e.colors.neutral0};
    }
  }
  &[aria-disabled='true'] {
    pointer-events: none;
  }

  ${$}
`, a = c.forwardRef((g, t) => {
  var d = g, { disabled: e, children: o } = d, r = u(d, ["disabled", "children"]);
  return /* @__PURE__ */ c.createElement(y, n({
    ref: t,
    "aria-disabled": e,
    type: "button",
    disabled: e
  }, r), o);
});
a.displayName = "BaseButton";
a.defaultProps = {
  disabled: !1
};
a.propTypes = {
  children: b.node.isRequired,
  disabled: b.bool
};
export {
  a as BaseButton,
  y as BaseButtonWrapper
};
