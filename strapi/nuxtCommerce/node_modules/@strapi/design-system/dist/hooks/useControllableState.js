import * as r from "react";
import { useCallbackRef as i } from "@radix-ui/react-use-callback-ref";
function R({ prop: o, defaultProp: u, onChange: c = () => {
} }) {
  const [t, e] = C({ defaultProp: u, onChange: c }), n = o !== void 0, l = typeof o == "function" ? o(t) : o, d = n ? l : t, a = i(c), v = r.useCallback(
    (s) => {
      if (n) {
        const f = typeof s == "function" ? s(l) : s;
        f !== l && (a(f), e(s));
      } else
        e(s);
    },
    [n, l, e, a]
  );
  return [d, v];
}
function C({ defaultProp: o, onChange: u }) {
  const c = r.useState(o), [t] = c, e = r.useRef(t), n = i(u);
  return r.useEffect(() => {
    e.current !== t && (n(t), e.current = t);
  }, [t, e, n]), c;
}
export {
  R as useControllableState
};
