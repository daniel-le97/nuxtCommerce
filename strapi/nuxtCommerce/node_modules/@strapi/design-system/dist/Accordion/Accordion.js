import a from "react";
import o from "prop-types";
import l from "styled-components";
import { Typography as p } from "../Typography/Typography.js";
import { AccordionContext as $ } from "./AccordionContext.js";
import { useId as x } from "../helpers/useId.js";
import { Box as c } from "../Box/Box.js";
import { Flex as v } from "../Flex/Flex.js";
const b = ({ theme: r, expanded: e, variant: t, disabled: d, error: i }) => i ? `1px solid ${r.colors.danger600} !important` : d ? `1px solid ${r.colors.neutral150}` : e ? `1px solid ${r.colors.primary600}` : t === "primary" ? `1px solid ${r.colors.neutral0}` : `1px solid ${r.colors.neutral100}`, T = l(p)``, E = l(c)`
  border: ${b};

  &:hover:not([aria-disabled='true']) {
    border: 1px solid ${({ theme: r }) => r.colors.primary600};

    ${T} {
      color: ${({ theme: r, expanded: e }) => e ? void 0 : r.colors.primary700};
    }

    ${p} {
      color: ${({ theme: r, expanded: e }) => e ? void 0 : r.colors.primary600};
    }

    & > ${v} {
      background: ${({ theme: r }) => r.colors.primary100};
    }

    [data-strapi-dropdown='true'] {
      background: ${({ theme: r }) => r.colors.primary200};
    }
  }
`, m = ({
  children: r,
  expanded: e,
  id: t,
  size: d,
  variant: i,
  disabled: n,
  error: s,
  hasErrorMessage: u,
  onToggle: g,
  toggle: f
}) => {
  const y = x("accordion", t);
  return /* @__PURE__ */ a.createElement($.Provider, {
    value: { expanded: e, onToggle: g, toggle: f, id: y, size: d, variant: i, disabled: n }
  }, /* @__PURE__ */ a.createElement(E, {
    "data-strapi-expanded": e,
    disabled: n,
    "aria-disabled": n,
    expanded: e,
    hasRadius: !0,
    variant: i,
    error: s
  }, r), s && u && /* @__PURE__ */ a.createElement(c, {
    paddingTop: 1
  }, /* @__PURE__ */ a.createElement(p, {
    variant: "pi",
    textColor: "danger600"
  }, s)));
};
m.defaultProps = {
  disabled: !1,
  error: void 0,
  expanded: !1,
  hasErrorMessage: !0,
  id: void 0,
  toggle: void 0,
  size: "M",
  variant: "primary",
  onToggle: void 0
};
m.propTypes = {
  children: o.node.isRequired,
  disabled: o.bool,
  error: o.string,
  expanded: o.bool,
  hasErrorMessage: o.bool,
  id: o.string,
  onToggle: o.func,
  size: o.oneOf(["S", "M"]),
  toggle: o.func,
  variant: o.oneOf(["primary", "secondary"])
};
export {
  m as Accordion,
  T as AccordionTypography
};
