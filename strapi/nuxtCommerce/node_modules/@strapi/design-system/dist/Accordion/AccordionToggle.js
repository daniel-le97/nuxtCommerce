var O = Object.defineProperty;
var p = Object.getOwnPropertySymbols;
var T = Object.prototype.hasOwnProperty, k = Object.prototype.propertyIsEnumerable;
var C = (o, e, r) => e in o ? O(o, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : o[e] = r, g = (o, e) => {
  for (var r in e || (e = {}))
    T.call(e, r) && C(o, r, e[r]);
  if (p)
    for (var r of p(e))
      k.call(e, r) && C(o, r, e[r]);
  return o;
};
var E = (o, e) => {
  var r = {};
  for (var t in o)
    T.call(o, t) && e.indexOf(t) < 0 && (r[t] = o[t]);
  if (o != null && p)
    for (var t of p(o))
      e.indexOf(t) < 0 && k.call(o, t) && (r[t] = o[t]);
  return r;
};
import i, { useRef as _ } from "react";
import l from "prop-types";
import q from "@strapi/icons/CarretDown";
import z from "styled-components";
import { TextButton as U } from "../TextButton/TextButton.js";
import { Typography as X } from "../Typography/Typography.js";
import { AccordionTypography as Y } from "./Accordion.js";
import { useAccordion as G } from "./AccordionContext.js";
import { Flex as P } from "../Flex/Flex.js";
import { Stack as R } from "../Stack/Stack.js";
import { Icon as H } from "../Icon/Icon.js";
import { getBackground as J } from "./utils.js";
const K = z(U)`
  text-align: left;

  // necessary to make the ellipsis prop work on the title
  > span {
    max-width: 100%;
  }

  svg {
    width: ${14 / 16}rem;
    height: ${14 / 16}rem;

    path {
      fill: ${({ theme: o, expanded: e }) => e ? o.colors.primary600 : o.colors.neutral500};
    }
  }
`, N = z(P)`
  min-height: ${({ theme: o, size: e }) => o.sizes.accordions[e]};
  border-radius: ${({ theme: o, expanded: e }) => e ? `${o.borderRadius} ${o.borderRadius} 0 0` : o.borderRadius};

  &:hover {
    svg {
      path {
        fill: ${({ theme: o }) => o.colors.primary600};
      }
    }
  }
`, M = (Q) => {
  var f = Q, { title: o, description: e, as: r, togglePosition: t, action: u } = f, A = E(f, ["title", "description", "as", "togglePosition", "action"]);
  const s = _(null), { onToggle: h, toggle: y, expanded: n, id: m, size: a, variant: B, disabled: d } = G(), I = `accordion-content-${m}`, b = `accordion-label-${m}`, S = `accordion-desc-${m}`, c = a === "M" ? 6 : 4, x = a === "M" ? c : c - 2, W = J({ expanded: n, disabled: d, variant: B }), j = {
    as: r,
    fontWeight: a === "S" ? "bold" : void 0,
    id: b,
    textColor: n ? "primary600" : "neutral700",
    ellipsis: !0,
    variant: a === "M" ? "delta" : void 0
  }, D = n ? "primary600" : "neutral600", F = n ? "primary200" : "neutral200", $ = a === "M" ? `${32 / 16}rem` : `${24 / 16}rem`, L = () => {
    d || (y && !h ? (console.warn(
      'Deprecation warning: Usage of "toggle" prop in Accordion component is deprecated. This is discouraged and will be removed in the next major release. Please use "onToggle" instead'
    ), y()) : h());
  }, w = /* @__PURE__ */ i.createElement(P, {
    justifyContent: "center",
    borderRadius: "50%",
    height: $,
    width: $,
    transform: n ? "rotate(180deg)" : void 0,
    "data-strapi-dropdown": !0,
    disabled: d,
    "aria-hidden": !0,
    as: "span",
    background: F,
    cursor: d ? "not-allowed" : "pointer",
    onClick: () => {
      var v;
      return (v = s == null ? void 0 : s.current) == null ? void 0 : v.click();
    },
    shrink: 0
  }, /* @__PURE__ */ i.createElement(H, {
    as: q,
    width: a === "M" ? `${11 / 16}rem` : `${8 / 16}rem`,
    color: n ? "primary600" : "neutral600"
  }));
  return /* @__PURE__ */ i.createElement(N, {
    paddingBottom: x,
    paddingLeft: c,
    paddingRight: c,
    paddingTop: x,
    background: W,
    expanded: n,
    size: a,
    justifyContent: "space-between",
    cursor: d ? "not-allowed" : ""
  }, /* @__PURE__ */ i.createElement(R, {
    horizontal: !0,
    spacing: 3,
    flex: 1,
    maxWidth: "100%"
  }, t === "left" && w, /* @__PURE__ */ i.createElement(K, g({
    ref: s,
    onClick: L,
    "aria-disabled": d,
    "aria-expanded": n,
    "aria-controls": I,
    "aria-labelledby": b,
    "data-strapi-accordion-toggle": !0,
    expanded: n,
    type: "button",
    flex: 1,
    minWidth: 0
  }, A), /* @__PURE__ */ i.createElement(i.Fragment, null, /* @__PURE__ */ i.createElement(Y, g({}, j), o), e && /* @__PURE__ */ i.createElement(X, {
    as: "p",
    id: S,
    textColor: D
  }, e))), t === "right" && /* @__PURE__ */ i.createElement(R, {
    horizontal: !0,
    spacing: 3
  }, w, u), t === "left" && u));
};
M.defaultProps = {
  action: void 0,
  as: "span",
  description: void 0,
  variant: "primary",
  togglePosition: "right"
};
M.propTypes = {
  action: l.node,
  as: l.string,
  description: l.string,
  title: l.string.isRequired,
  togglePosition: l.oneOf(["right", "left"]),
  variant: l.oneOf(["primary", "secondary"])
};
export {
  M as AccordionToggle
};
