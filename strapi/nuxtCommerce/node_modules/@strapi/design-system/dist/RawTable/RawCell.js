var O = Object.defineProperty, D = Object.defineProperties;
var U = Object.getOwnPropertyDescriptors;
var m = Object.getOwnPropertySymbols;
var I = Object.prototype.hasOwnProperty, w = Object.prototype.propertyIsEnumerable;
var v = (e, n, r) => n in e ? O(e, n, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[n] = r, g = (e, n) => {
  for (var r in n || (n = {}))
    I.call(n, r) && v(e, r, n[r]);
  if (m)
    for (var r of m(n))
      w.call(n, r) && v(e, r, n[r]);
  return e;
}, R = (e, n) => D(e, U(n));
var A = (e, n) => {
  var r = {};
  for (var c in e)
    I.call(e, c) && n.indexOf(c) < 0 && (r[c] = e[c]);
  if (e != null && m)
    for (var c of m(e))
      n.indexOf(c) < 0 && w.call(e, c) && (r[c] = e[c]);
  return r;
};
import B, { useRef as q, useState as C, useLayoutEffect as P, useCallback as S } from "react";
import s from "prop-types";
import { Box as _ } from "../Box/Box.js";
import { getFocusableNodes as f, getFocusableNodesWithKeyboardNav as E } from "../helpers/getFocusableNodes.js";
import { KeyboardKeys as b } from "../helpers/keyboardKeys.js";
import { useTable as G } from "./RawTableContext.js";
const F = (e) => /* @__PURE__ */ B.createElement(T, R(g({}, e), {
  as: "th"
})), T = (c) => {
  var x = c, { coords: e, as: n } = x, r = A(x, ["coords", "as"]);
  const u = q(null), { rowIndex: K, colIndex: k, setTableValues: y } = G(), [l, h] = C(!1), L = (t) => {
    const o = f(u.current, !0);
    if (o.length === 0 || o.length === 1 && E(o).length === 0)
      return;
    if (o.length > 1 && !o.find((i) => i.tagName !== "BUTTON")) {
      t.preventDefault();
      const i = o.findIndex((d) => d === document.activeElement);
      if (t.key === b.RIGHT) {
        const d = o[i + 1];
        d && (t.stopPropagation(), d.focus());
      } else if (t.key === b.LEFT) {
        const d = o[i - 1];
        d && (t.stopPropagation(), d.focus());
      }
      return;
    }
    const a = t.key === b.ENTER;
    if (a && !l)
      h(!0);
    else if ((t.key === b.ESCAPE || a) && l) {
      if (a && document.activeElement.tagName === "A")
        return;
      h(!1), u.current.focus();
    } else
      l && t.stopPropagation();
  }, p = K === e.row - 1 && k === e.col - 1;
  P(() => {
    const t = f(u.current, !0);
    t.length === 0 || t.length === 1 && E(t).length !== 0 || t.length > 1 && Boolean(t.find((o) => o.tagName !== "BUTTON")) ? (u.current.setAttribute("tabIndex", !l && p ? 0 : -1), t.forEach((o, a) => {
      o.setAttribute("tabIndex", l ? 0 : -1), l && a === 0 && o.focus();
    })) : t.forEach((o) => {
      o.setAttribute("tabIndex", p ? 0 : -1);
    });
  }, [l, p]);
  const N = S(() => {
    const t = f(u.current, !0);
    t.length >= 1 && (E(t).length !== 0 || !t.find((o) => o.tagName !== "BUTTON")) && h(!0), y({ rowIndex: e.row - 1, colIndex: e.col - 1 });
  }, [e, y]);
  return P(() => {
    const t = u.current;
    return f(t, !0).forEach((a) => {
      a.addEventListener("focus", N);
    }), () => {
      f(t, !0).forEach((i) => {
        i.removeEventListener("focus", N);
      });
    };
  }, [N]), /* @__PURE__ */ B.createElement(_, g({
    role: "gridcell",
    as: n,
    ref: u,
    onKeyDown: L
  }, r));
};
F.defaultProps = {
  children: void 0,
  coords: {}
};
F.propTypes = {
  "aria-colindex": s.number.isRequired,
  children: s.node,
  coords: s.shape({
    col: s.number,
    row: s.number
  })
};
T.defaultProps = {
  as: "td",
  children: void 0,
  coords: {}
};
T.propTypes = {
  "aria-colindex": s.number.isRequired,
  as: s.oneOf(["td", "th"]),
  children: s.node,
  coords: s.shape({
    col: s.number,
    row: s.number
  })
};
export {
  T as RawTd,
  F as RawTh
};
