var w = Object.defineProperty;
var i = Object.getOwnPropertySymbols;
var m = Object.prototype.hasOwnProperty, f = Object.prototype.propertyIsEnumerable;
var p = (e, t, r) => t in e ? w(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, b = (e, t) => {
  for (var r in t || (t = {}))
    m.call(t, r) && p(e, r, t[r]);
  if (i)
    for (var r of i(t))
      f.call(t, r) && p(e, r, t[r]);
  return e;
};
var h = (e, t) => {
  var r = {};
  for (var o in e)
    m.call(e, o) && t.indexOf(o) < 0 && (r[o] = e[o]);
  if (e != null && i)
    for (var o of i(e))
      t.indexOf(o) < 0 && f.call(e, o) && (r[o] = e[o]);
  return r;
};
import n from "react";
import a from "prop-types";
import g from "styled-components";
import { Flex as E } from "../Flex/Flex.js";
import { Box as y } from "../Box/Box.js";
const l = g.div`
  background: ${({ theme: e }) => e.colors.danger500};
  border: none;
  border-radius: 16px;
  position: relative;
  height: ${24 / 16}rem;
  width: ${40 / 16}rem;

  & span {
    font-size: ${({ visibleLabels: e }) => e ? "1rem" : 0};
  }

  &:before {
    content: '';
    background: ${({ theme: e }) => e.colors.neutral0};
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    position: absolute;
    transition: all 0.5s;
    left: ${({ theme: e }) => e.spaces[1]};
    top: ${({ theme: e }) => e.spaces[1]};
  }

  @media (prefers-reduced-motion: reduce) {
    &:before {
      transition: none;
    }
  }
`, R = g.button`
  background: transparent;
  padding: 0;
  border: none;

  &[aria-checked='true'] ${l} {
    background: ${({ theme: e }) => e.colors.success500};
  }

  &[aria-checked='true'] ${l}:before {
    transform: translateX(1rem);
  }
`, c = n.forwardRef(
  (x, k) => {
    var u = x, { label: e, onChange: t, onLabel: r, offLabel: o, selected: s, visibleLabels: d } = u, $ = h(u, ["label", "onChange", "onLabel", "offLabel", "selected", "visibleLabels"]);
    return /* @__PURE__ */ n.createElement(R, b({
      ref: k,
      role: "switch",
      "aria-checked": s,
      "aria-label": e,
      onClick: t,
      visibleLabels: d,
      type: "button"
    }, $), /* @__PURE__ */ n.createElement(E, null, /* @__PURE__ */ n.createElement(l, null, /* @__PURE__ */ n.createElement("span", null, r), /* @__PURE__ */ n.createElement("span", null, o)), d && /* @__PURE__ */ n.createElement(y, {
      as: "span",
      "aria-hidden": !0,
      paddingLeft: 2,
      color: s ? "success600" : "danger600"
    }, s ? r : o)));
  }
);
c.defaultProps = {
  onLabel: "On",
  offLabel: "Off",
  visibleLabels: !1
};
c.propTypes = {
  label: a.string.isRequired,
  offLabel: a.string,
  onChange: a.func.isRequired,
  onLabel: a.string,
  selected: a.bool.isRequired,
  visibleLabels: a.bool
};
c.displayName = "Switch";
export {
  c as Switch
};
