var E = Object.defineProperty;
var l = Object.getOwnPropertySymbols;
var s = Object.prototype.hasOwnProperty, d = Object.prototype.propertyIsEnumerable;
var m = (e, t, r) => t in e ? E(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, c = (e, t) => {
  for (var r in t || (t = {}))
    s.call(t, r) && m(e, r, t[r]);
  if (l)
    for (var r of l(t))
      d.call(t, r) && m(e, r, t[r]);
  return e;
};
var u = (e, t) => {
  var r = {};
  for (var o in e)
    s.call(e, o) && t.indexOf(o) < 0 && (r[o] = e[o]);
  if (e != null && l)
    for (var o of l(e))
      t.indexOf(o) < 0 && d.call(e, o) && (r[o] = e[o]);
  return r;
};
import i from "react";
import a from "prop-types";
import $ from "styled-components";
import R from "@strapi/icons/ChevronRight";
import { Typography as y } from "../Typography/Typography.js";
import { Box as h } from "../Box/Box.js";
import { Flex as g } from "../Flex/Flex.js";
import { VisuallyHidden as T } from "../VisuallyHidden/VisuallyHidden.js";
const C = $(g)`
  svg {
    height: ${10 / 16}rem;
    width: ${10 / 16}rem;
    path {
      fill: ${({ theme: e }) => e.colors.neutral500};
    }
  }
  :last-of-type ${h} {
    display: none;
  }
  :last-of-type ${y} {
    color: ${({ theme: e }) => e.colors.neutral800};
    font-weight: ${({ theme: e }) => e.fontWeights.bold};
  }
`, n = ({ children: e }) => /* @__PURE__ */ i.createElement(C, {
  inline: !0,
  as: "li"
}, /* @__PURE__ */ i.createElement(y, {
  variant: "pi",
  textColor: "neutral600"
}, e), /* @__PURE__ */ i.createElement(h, {
  "aria-hidden": !0,
  paddingLeft: 3,
  paddingRight: 3
}, /* @__PURE__ */ i.createElement(R, null)));
n.displayName = "Crumb";
n.propTypes = {
  children: a.node.isRequired
};
const f = a.shape({ type: a.oneOf([n]) }), b = (o) => {
  var p = o, { children: e, label: t } = p, r = u(p, ["children", "label"]);
  return /* @__PURE__ */ i.createElement(g, c({}, r), /* @__PURE__ */ i.createElement(T, null, t), /* @__PURE__ */ i.createElement("ol", {
    "aria-hidden": !0
  }, e));
};
b.displayName = "Breadcrumbs";
b.propTypes = {
  children: a.oneOfType([a.arrayOf(f), f]).isRequired,
  label: a.string.isRequired
};
export {
  b as Breadcrumbs,
  n as Crumb
};
