var g = Object.defineProperty;
var p = Object.getOwnPropertySymbols;
var m = Object.prototype.hasOwnProperty, l = Object.prototype.propertyIsEnumerable;
var d = (o, r, e) => r in o ? g(o, r, { enumerable: !0, configurable: !0, writable: !0, value: e }) : o[r] = e, f = (o, r) => {
  for (var e in r || (r = {}))
    m.call(r, e) && d(o, e, r[e]);
  if (p)
    for (var e of p(r))
      l.call(r, e) && d(o, e, r[e]);
  return o;
};
var u = (o, r) => {
  var e = {};
  for (var t in o)
    m.call(o, t) && r.indexOf(t) < 0 && (e[t] = o[t]);
  if (o != null && p)
    for (var t of p(o))
      r.indexOf(t) < 0 && l.call(o, t) && (e[t] = o[t]);
  return e;
};
import s, { forwardRef as b } from "react";
import i from "prop-types";
import { Typography as y } from "../Typography/Typography.js";
import { OptionBox as c } from "./components.js";
const n = b((h, t) => {
  var a = h, { isSelected: o, children: r } = a, e = u(a, ["isSelected", "children"]);
  return /* @__PURE__ */ s.createElement(c, f({
    hasRadius: !0,
    paddingLeft: 4,
    paddingRight: 4,
    paddingTop: 2,
    paddingBottom: 2,
    role: "option",
    background: "neutral0",
    isSelected: o,
    ref: t
  }, e), /* @__PURE__ */ s.createElement(y, {
    textColor: o ? "primary600" : "neutral800",
    fontWeight: o ? "bold" : null
  }, r));
});
n.defaultProps = {
  isSelected: !1
};
n.propTypes = {
  children: i.oneOfType([i.string, i.number]).isRequired,
  isSelected: i.bool
};
n.displayName = "ComboboxOption";
export {
  n as ComboboxOption
};
