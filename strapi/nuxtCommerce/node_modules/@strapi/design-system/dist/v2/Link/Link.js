var x = Object.defineProperty;
var i = Object.getOwnPropertySymbols;
var c = Object.prototype.hasOwnProperty, f = Object.prototype.propertyIsEnumerable;
var m = (e, r, t) => r in e ? x(e, r, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[r] = t, y = (e, r) => {
  for (var t in r || (r = {}))
    c.call(r, t) && m(e, t, r[t]);
  if (i)
    for (var t of i(r))
      f.call(r, t) && m(e, t, r[t]);
  return e;
};
var u = (e, r) => {
  var t = {};
  for (var o in e)
    c.call(e, o) && r.indexOf(o) < 0 && (t[o] = e[o]);
  if (e != null && i)
    for (var o of i(e))
      r.indexOf(o) < 0 && f.call(e, o) && (t[o] = e[o]);
  return t;
};
import n from "react";
import a from "prop-types";
import v from "styled-components";
import E from "@strapi/icons/ExternalLink";
import { Typography as L } from "../../Typography/Typography.js";
import { Box as k } from "../../Box/Box.js";
import { buttonFocusStyle as $ } from "../../themes/utils.js";
import { BaseLink as R } from "../../BaseLink/BaseLink.js";
const T = v(R)`
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  pointer-events: ${({ disabled: e }) => e ? "none" : void 0};

  svg path {
    fill: ${({ disabled: e, theme: r }) => e ? r.colors.neutral600 : r.colors.primary600};
  }

  svg {
    font-size: ${10 / 16}rem;
  }

  &:hover,
  &:active {
    color: ${({ theme: e }) => e.colors.primary800};
  }

  ${$};
`, p = v(k)`
  display: flex;
`, s = n.forwardRef((b, h) => {
  var d = b, { children: e, href: r, disabled: t, startIcon: o, endIcon: l } = d, g = u(d, ["children", "href", "disabled", "startIcon", "endIcon"]);
  return /* @__PURE__ */ n.createElement(T, y({
    ref: h,
    href: r,
    disabled: t
  }, g), o && /* @__PURE__ */ n.createElement(p, {
    as: "span",
    "aria-hidden": !0,
    paddingRight: 2
  }, o), /* @__PURE__ */ n.createElement(L, {
    textColor: t ? "neutral600" : "primary600"
  }, e), l && /* @__PURE__ */ n.createElement(p, {
    as: "span",
    "aria-hidden": !0,
    paddingLeft: 2
  }, l), r && !l && /* @__PURE__ */ n.createElement(p, {
    as: "span",
    "aria-hidden": !0,
    paddingLeft: 2
  }, /* @__PURE__ */ n.createElement(E, null)));
});
s.displayName = "Link";
s.defaultProps = {
  as: void 0,
  href: void 0,
  disabled: !1,
  startIcon: void 0,
  endIcon: void 0
};
s.propTypes = {
  as: a.elementType,
  children: a.node.isRequired,
  disabled: a.bool,
  endIcon: a.element,
  href: a.string,
  startIcon: a.element
};
export {
  s as Link
};
