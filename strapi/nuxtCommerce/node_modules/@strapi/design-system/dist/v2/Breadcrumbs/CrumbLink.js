var u = Object.defineProperty;
var i = Object.getOwnPropertySymbols;
var l = Object.prototype.hasOwnProperty, a = Object.prototype.propertyIsEnumerable;
var n = (o, r, e) => r in o ? u(o, r, { enumerable: !0, configurable: !0, writable: !0, value: e }) : o[r] = e, d = (o, r) => {
  for (var e in r || (r = {}))
    l.call(r, e) && n(o, e, r[e]);
  if (i)
    for (var e of i(r))
      a.call(r, e) && n(o, e, r[e]);
  return o;
};
var c = (o, r) => {
  var e = {};
  for (var t in o)
    l.call(o, t) && r.indexOf(t) < 0 && (e[t] = o[t]);
  if (o != null && i)
    for (var t of i(o))
      r.indexOf(t) < 0 && a.call(o, t) && (e[t] = o[t]);
  return e;
};
import m from "react";
import p from "prop-types";
import f from "styled-components";
import { BaseLink as $ } from "../../BaseLink/BaseLink.js";
const b = f($)`
  border-radius: ${({ theme: o }) => o.borderRadius};
  color: ${({ theme: o }) => o.colors.neutral600};
  font-size: ${({ theme: o }) => o.fontSizes[1]};
  line-height: ${({ theme: o }) => o.lineHeights[4]};
  padding: ${({ theme: o }) => `${o.spaces[1]} ${o.spaces[2]}`};
  text-decoration: none;

  :hover,
  :focus {
    background-color: ${({ theme: o }) => o.colors.neutral200};
    color: ${({ theme: o }) => o.colors.neutral700};
  }
`, s = (e) => {
  var t = e, { children: o } = t, r = c(t, ["children"]);
  return /* @__PURE__ */ m.createElement(b, d({}, r), o);
};
s.displayName = "CrumbLink";
s.defaultProps = {
  to: void 0
};
s.propTypes = {
  children: p.node.isRequired,
  to: p.string
};
export {
  s as CrumbLink
};
