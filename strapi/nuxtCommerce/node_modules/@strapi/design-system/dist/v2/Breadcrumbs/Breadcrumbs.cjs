"use strict";var _=Object.defineProperty;var i=Object.getOwnPropertySymbols;var h=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var f=(e,r,t)=>r in e?_(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,m=(e,r)=>{for(var t in r||(r={}))h.call(r,t)&&f(e,t,r[t]);if(i)for(var t of i(r))p.call(r,t)&&f(e,t,r[t]);return e};var y=(e,r)=>{var t={};for(var a in e)h.call(e,a)&&r.indexOf(a)<0&&(t[a]=e[a]);if(e!=null&&i)for(var a of i(e))r.indexOf(a)<0&&p.call(e,a)&&(t[a]=e[a]);return t};Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const o=require("react"),q=require("prop-types"),B=require("styled-components"),D=require("../../Box/Box.cjs"),T=require("./Divider.cjs"),b=require("../../Flex/Flex.cjs"),d=e=>e&&typeof e=="object"&&"default"in e?e:{default:e},n=d(o),l=d(q),j=d(B),F=j.default(b.Flex)`
  // CrumbLinks do have padding-x, because they need to have a
  // interaction effect, which mis-aligns the breadcrumbs on the left.
  // This normalizes the behavior by moving the first item to left by
  // the same amount it has inner padding
  :first-child {
    margin-left: ${({theme:e})=>`calc(-1*${e.spaces[2]})`};
  }
`,c=a=>{var u=a,{label:e,children:r}=u,t=y(u,["label","children"]);const s=o.Children.toArray(r);return n.default.createElement(D.Box,m({"aria-label":e},t),n.default.createElement(F,{as:"ol",horizontal:!0},o.Children.map(s,(g,v)=>{const x=s.length>1&&v+1<s.length;return n.default.createElement(b.Flex,{inline:!0,as:"li"},g,x&&n.default.createElement(T.Divider,null))})))};c.displayName="Breadcrumbs";c.propTypes={children:l.default.oneOfType([l.default.arrayOf(l.default.node),l.default.node]).isRequired,label:l.default.string.isRequired};exports.Breadcrumbs=c;
