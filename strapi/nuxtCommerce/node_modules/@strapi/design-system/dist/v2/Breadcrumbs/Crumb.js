var g = Object.defineProperty;
var p = Object.getOwnPropertySymbols;
var m = Object.prototype.hasOwnProperty, n = Object.prototype.propertyIsEnumerable;
var d = (r, e, o) => e in r ? g(r, e, { enumerable: !0, configurable: !0, writable: !0, value: o }) : r[e] = o, l = (r, e) => {
  for (var o in e || (e = {}))
    m.call(e, o) && d(r, o, e[o]);
  if (p)
    for (var o of p(e))
      n.call(e, o) && d(r, o, e[o]);
  return r;
};
var f = (r, e) => {
  var o = {};
  for (var t in r)
    m.call(r, t) && e.indexOf(t) < 0 && (o[t] = r[t]);
  if (r != null && p)
    for (var t of p(r))
      e.indexOf(t) < 0 && n.call(r, t) && (o[t] = r[t]);
  return o;
};
import s from "react";
import u from "prop-types";
import { Box as c } from "../../Box/Box.js";
import { Typography as y } from "../../Typography/Typography.js";
const a = (t) => {
  var i = t, { children: r, isCurrent: e } = i, o = f(i, ["children", "isCurrent"]);
  return /* @__PURE__ */ s.createElement(c, {
    paddingLeft: 2,
    paddingRight: 2,
    paddingTop: 1,
    paddingBottom: 1
  }, /* @__PURE__ */ s.createElement(y, l({
    variant: "pi",
    textColor: "neutral800",
    fontWeight: e ? "bold" : "normal",
    "aria-current": e
  }, o), r));
};
a.displayName = "Crumb";
a.defaultProps = {
  isCurrent: !1
};
a.propTypes = {
  children: u.node.isRequired,
  isCurrent: u.bool
};
export {
  a as Crumb
};
