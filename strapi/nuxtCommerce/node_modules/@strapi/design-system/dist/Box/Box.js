import a from "styled-components";
import r from "../helpers/handleResponsiveValues.js";
import { boxDefaultProps as t, boxPropTypes as n } from "./BoxProps.js";
const d = {
  color: !0
}, i = a.div.withConfig({
  shouldForwardProp: (o, s) => !d[o] && s(o)
})`
  // Font
  font-size: ${({ fontSize: o, theme: s }) => s.fontSizes[o] || o};

  // Colors
  background: ${({ theme: o, background: s }) => o.colors[s]};
  color: ${({ theme: o, color: s }) => o.colors[s]};

  // Spaces
  ${({ theme: o, padding: s }) => r("padding", s, o)}
  ${({ theme: o, paddingTop: s }) => r("padding-top", s, o)}
  ${({ theme: o, paddingRight: s }) => r("padding-right", s, o)}
  ${({ theme: o, paddingBottom: s }) => r("padding-bottom", s, o)}
  ${({ theme: o, paddingLeft: s }) => r("padding-left", s, o)}
  ${({ theme: o, marginLeft: s }) => r("margin-left", s, o)}
  ${({ theme: o, marginRight: s }) => r("margin-right", s, o)}
  ${({ theme: o, marginTop: s }) => r("margin-top", s, o)}
  ${({ theme: o, marginBottom: s }) => r("margin-bottom", s, o)}

  // Responsive hiding
  ${({ theme: o, hiddenS: s }) => s ? `${o.mediaQueries.tablet} { display: none; }` : void 0}
  ${({ theme: o, hiddenXS: s }) => s ? `${o.mediaQueries.mobile} { display: none; }` : void 0}
  

  // Borders
  border-radius: ${({ theme: o, hasRadius: s, borderRadius: e }) => s ? o.borderRadius : e};
  border-style: ${({ borderStyle: o }) => o};
  border-width: ${({ borderWidth: o }) => o};
  border-color: ${({ borderColor: o, theme: s }) => s.colors[o]};
  border: ${({ theme: o, borderColor: s, borderStyle: e, borderWidth: $ }) => {
  if (s && !e && !$)
    return `1px solid ${o.colors[s]}`;
}};

  // Shadows
  box-shadow: ${({ theme: o, shadow: s }) => o.shadows[s]};

  // Handlers
  pointer-events: ${({ pointerEvents: o }) => o};
  &:hover {
    ${({ _hover: o, theme: s }) => o ? o(s) : void 0}
  }

  // Display
  display: ${({ display: o }) => o};

  // Position
  position: ${({ position: o }) => o};
  left: ${({ left: o, theme: s }) => s.spaces[o] || o};
  right: ${({ right: o, theme: s }) => s.spaces[o] || o};
  top: ${({ top: o, theme: s }) => s.spaces[o] || o};
  bottom: ${({ bottom: o, theme: s }) => s.spaces[o] || o};
  z-index: ${({ zIndex: o }) => o};
  overflow: ${({ overflow: o }) => o};
  cursor: ${({ cursor: o }) => o};

  // Size
  width: ${({ width: o, theme: s }) => s.spaces[o] || o};
  max-width: ${({ maxWidth: o, theme: s }) => s.spaces[o] || o};
  min-width: ${({ minWidth: o, theme: s }) => s.spaces[o] || o};
  height: ${({ height: o, theme: s }) => s.spaces[o] || o};
  max-height: ${({ maxHeight: o, theme: s }) => s.spaces[o] || o};
  min-height: ${({ minHeight: o, theme: s }) => s.spaces[o] || o};

  // Animation
  transition: ${({ transition: o }) => o};
  transform: ${({ transform: o }) => o};
  animation: ${({ animation: o }) => o};

  //Flexbox children props
  flex-shrink: ${({ shrink: o }) => o};
  flex-grow: ${({ grow: o }) => o};
  flex-basis: ${({ basis: o }) => o};
  flex: ${({ flex: o }) => o};

  // Text
  text-align: ${({ textAlign: o }) => o};
  text-transform: ${({ textTransform: o }) => o};
  line-height: ${({ lineHeight: o }) => o};

  // Cursor
  cursor: ${({ cursor: o }) => o};
`;
i.defaultProps = t;
i.propTypes = n;
export {
  i as Box
};
