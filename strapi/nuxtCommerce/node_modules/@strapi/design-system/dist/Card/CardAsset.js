var u = Object.defineProperty, b = Object.defineProperties;
var x = Object.getOwnPropertyDescriptors;
var o = Object.getOwnPropertySymbols;
var d = Object.prototype.hasOwnProperty, p = Object.prototype.propertyIsEnumerable;
var n = (e, t, r) => t in e ? u(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, c = (e, t) => {
  for (var r in t || (t = {}))
    d.call(t, r) && n(e, r, t[r]);
  if (o)
    for (var r of o(t))
      p.call(t, r) && n(e, r, t[r]);
  return e;
}, m = (e, t) => b(e, x(t));
var l = (e, t) => {
  var r = {};
  for (var i in e)
    d.call(e, i) && t.indexOf(i) < 0 && (r[i] = e[i]);
  if (e != null && o)
    for (var i of o(e))
      t.indexOf(i) < 0 && p.call(e, i) && (r[i] = e[i]);
  return r;
};
import a from "react";
import f from "styled-components";
import h from "prop-types";
import { Flex as w } from "../Flex/Flex.js";
const y = f.img`
  // inline flows is based on typography and displays an extra white space below the image
  // switch to block is required in order to make the img stick the bottom of the container
  // addition infos: https://stackoverflow.com/questions/5804256/image-inside-div-has-extra-space-below-the-image
  margin: 0;
  padding: 0;
  max-height: 100%;
  max-width: 100%;
  object-fit: contain;
`, k = {
  S: 88,
  M: 164
}, v = f.div`
  display: flex;
  justify-content: center;
  height: ${({ size: e }) => k[e] / 16}rem;
  width: 100%;
  background: repeating-conic-gradient(${({ theme: e }) => e.colors.neutral100} 0% 25%, transparent 0% 50%) 50% / 20px
    20px;
  border-top-left-radius: ${({ theme: e }) => e.borderRadius};
  border-top-right-radius: ${({ theme: e }) => e.borderRadius};
`, g = (i) => {
  var s = i, { size: e, children: t } = s, r = l(s, ["size", "children"]);
  return /* @__PURE__ */ a.createElement(v, {
    size: e
  }, t ? /* @__PURE__ */ a.createElement(w, null, t) : /* @__PURE__ */ a.createElement(y, m(c({}, r), {
    "aria-hidden": !0
  })));
};
g.defaultProps = {
  children: void 0,
  size: "M"
};
g.propTypes = {
  children: h.node,
  size: h.oneOf(["S", "M"])
};
export {
  g as CardAsset
};
