"use strict";var m=Object.defineProperty;var s=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var h=(t,e,o)=>e in t?m(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o,c=(t,e)=>{for(var o in e||(e={}))a.call(e,o)&&h(t,o,e[o]);if(s)for(var o of s(e))l.call(e,o)&&h(t,o,e[o]);return t};Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const d=require("./lightTheme/index.cjs"),u=t=>`
${t}

The following is an example:


import { lightTheme, extendTheme } from '@strapi/design-system';

const myCustomTheme = extendTheme(lightTheme, {
    ${Object.keys(d.lightTheme).map(e=>`${e}: /* put the overrides for the ${e} key */,`).join(`
`)}
})
`,r=t=>t&&typeof t=="object"&&!Array.isArray(t),i=(t,e)=>{const o=c({},t);return r(t)&&r(e)&&Object.keys(e).forEach(n=>{r(e[n])&&t.hasOwnProperty(n)?o[n]=i(t[n],e[n]):o[n]=e[n]}),o},f=(t,e)=>{if(!r(t)){const o=u("The first argument should be an object and corresponds to the theme you want to extend.");throw new Error(o)}if(!r(e)){const o=u("The second argument should be an object and corresponds to the keys of the theme you want to override.");throw new Error(o)}return i(t,e)};exports.extendTheme=f;
