var f = Object.defineProperty;
var h = Object.getOwnPropertySymbols;
var p = Object.prototype.hasOwnProperty, u = Object.prototype.propertyIsEnumerable;
var s = (t, e, o) => e in t ? f(t, e, { enumerable: !0, configurable: !0, writable: !0, value: o }) : t[e] = o, c = (t, e) => {
  for (var o in e || (e = {}))
    p.call(e, o) && s(t, o, e[o]);
  if (h)
    for (var o of h(e))
      u.call(e, o) && s(t, o, e[o]);
  return t;
};
import { lightTheme as i } from "./lightTheme/index.js";
const m = (t) => `
${t}

The following is an example:


import { lightTheme, extendTheme } from '@strapi/design-system';

const myCustomTheme = extendTheme(lightTheme, {
    ${Object.keys(i).map((e) => `${e}: /* put the overrides for the ${e} key */,`).join(`
`)}
})
`, r = (t) => t && typeof t == "object" && !Array.isArray(t), a = (t, e) => {
  const o = c({}, t);
  return r(t) && r(e) && Object.keys(e).forEach((n) => {
    r(e[n]) && t.hasOwnProperty(n) ? o[n] = a(t[n], e[n]) : o[n] = e[n];
  }), o;
}, b = (t, e) => {
  if (!r(t)) {
    const o = m(
      "The first argument should be an object and corresponds to the theme you want to extend."
    );
    throw new Error(o);
  }
  if (!r(e)) {
    const o = m(
      "The second argument should be an object and corresponds to the keys of the theme you want to override."
    );
    throw new Error(o);
  }
  return a(t, e);
};
export {
  b as extendTheme
};
