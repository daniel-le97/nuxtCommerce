var g = Object.defineProperty;
var t = Object.getOwnPropertySymbols;
var d = Object.prototype.hasOwnProperty, n = Object.prototype.propertyIsEnumerable;
var s = (r, o, e) => o in r ? g(r, o, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[o] = e, a = (r, o) => {
  for (var e in o || (o = {}))
    d.call(o, e) && s(r, e, o[e]);
  if (t)
    for (var e of t(o))
      n.call(o, e) && s(r, e, o[e]);
  return r;
};
var l = (r, o) => {
  var e = {};
  for (var m in r)
    d.call(r, m) && o.indexOf(m) < 0 && (e[m] = r[m]);
  if (r != null && t)
    for (var m of t(r))
      o.indexOf(m) < 0 && n.call(r, m) && (e[m] = r[m]);
  return e;
};
import u from "react";
import x from "styled-components";
import i from "prop-types";
import { Box as $ } from "../Box/Box.js";
import { useGrid as v } from "./GridContext.js";
const y = x.div`
  grid-column: span ${({ col: r }) => r};
  max-width: 100%;

  ${({ theme: r }) => r.mediaQueries.tablet} {
    grid-column: span ${({ s: r }) => r};
  }

  ${({ theme: r }) => r.mediaQueries.mobile} {
    grid-column: span ${({ xs: r }) => r};
  }
`, c = (G) => {
  var p = G, { col: r, xs: o, s: e } = p, m = l(p, ["col", "xs", "s"]);
  const { gap: f, gridCols: b } = v();
  return /* @__PURE__ */ u.createElement(y, {
    gap: f,
    gridCols: b,
    col: r,
    xs: o,
    s: e
  }, /* @__PURE__ */ u.createElement($, a({}, m)));
};
c.defaultProps = {
  col: void 0,
  s: void 0,
  xs: void 0
};
c.propTypes = {
  col: i.number,
  s: i.number,
  xs: i.number
};
export {
  c as GridItem
};
