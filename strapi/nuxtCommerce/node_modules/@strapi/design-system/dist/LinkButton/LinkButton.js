var L = Object.defineProperty, R = Object.defineProperties;
var T = Object.getOwnPropertyDescriptors;
var a = Object.getOwnPropertySymbols;
var b = Object.prototype.hasOwnProperty, $ = Object.prototype.propertyIsEnumerable;
var v = (e, r, t) => r in e ? L(e, r, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[r] = t, g = (e, r) => {
  for (var t in r || (r = {}))
    b.call(r, t) && v(e, t, r[t]);
  if (a)
    for (var t of a(r))
      $.call(r, t) && v(e, t, r[t]);
  return e;
}, y = (e, r) => R(e, T(r));
var h = (e, r) => {
  var t = {};
  for (var o in e)
    b.call(e, o) && r.indexOf(o) < 0 && (t[o] = e[o]);
  if (e != null && a)
    for (var o of a(e))
      r.indexOf(o) < 0 && $.call(e, o) && (t[o] = e[o]);
  return t;
};
import n from "react";
import { NavLink as N } from "react-router-dom";
import I from "styled-components";
import i from "prop-types";
import { Typography as l } from "../Typography/Typography.js";
import { Box as f } from "../Box/Box.js";
import { getDisabledStyle as S, getHoverStyle as P, getActiveStyle as W, getVariantStyle as _ } from "../Button/utils.js";
import { BUTTON_SIZES as w, VARIANTS as A } from "../Button/constants.js";
import { BaseButtonWrapper as O } from "../BaseButton/BaseButton.js";
const C = I(O)`
  padding: ${({ theme: e, size: r }) => `${r === "S" ? e.spaces[2] : "10px"} ${e.spaces[4]}`};
  background: ${({ theme: e }) => e.colors.buttonPrimary600};
  border: 1px solid ${({ theme: e }) => e.colors.buttonPrimary600};
  border-radius: ${({ theme: e }) => e.borderRadius};
  ${f} {
    display: flex;
    align-items: center;
  }
  ${l} {
    color: ${({ theme: e }) => e.colors.buttonNeutral0};
  }
  &[aria-disabled='true'] {
    ${S}
    &:active {
      ${S}
    }
  }
  &:hover {
    ${P}
  }
  &:active {
    ${W}
  }
  ${_}
  /**
    Link specific properties
  */
  display: inline-flex;
  text-decoration: none;
  pointer-events: ${({ disabled: e }) => e ? "none" : void 0};
`, s = n.forwardRef(
  (V, E) => {
    var u = V, { variant: e, startIcon: r, endIcon: t, disabled: o, children: m, size: p, href: d, to: c } = u, k = h(u, ["variant", "startIcon", "endIcon", "disabled", "children", "size", "href", "to"]);
    const x = d ? "_blank" : void 0, B = d ? "noreferrer noopener" : void 0;
    return /* @__PURE__ */ n.createElement(C, y(g({
      ref: E,
      "aria-disabled": o,
      size: p,
      variant: e,
      target: x,
      rel: B,
      to: o ? void 0 : c,
      href: o ? "#" : d
    }, k), {
      as: c && !o ? N : "a"
    }), r && /* @__PURE__ */ n.createElement(f, {
      "aria-hidden": !0,
      paddingRight: 2
    }, r), p === "S" ? /* @__PURE__ */ n.createElement(l, {
      variant: "pi",
      fontWeight: "bold"
    }, m) : /* @__PURE__ */ n.createElement(l, {
      fontWeight: "bold"
    }, m), t && /* @__PURE__ */ n.createElement(f, {
      "aria-hidden": !0,
      paddingLeft: 2
    }, t));
  }
);
s.displayName = "LinkButton";
s.defaultProps = {
  disabled: !1,
  startIcon: void 0,
  endIcon: void 0,
  size: "S",
  variant: "default",
  onClick: void 0,
  href: void 0,
  to: void 0
};
s.propTypes = {
  children: i.node.isRequired,
  disabled: i.bool,
  endIcon: i.element,
  href(e) {
    if (!e.disabled && !e.to && !e.href)
      return new Error("href must be defined");
  },
  onClick: i.func,
  size: i.oneOf(w),
  startIcon: i.element,
  to(e) {
    if (!e.disabled && !e.href && !e.to)
      return new Error("to must be defined");
  },
  variant: i.oneOf(A)
};
export {
  s as LinkButton
};
