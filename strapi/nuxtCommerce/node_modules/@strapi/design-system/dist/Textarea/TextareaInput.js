var T = Object.defineProperty;
var t = Object.getOwnPropertySymbols;
var u = Object.prototype.hasOwnProperty, m = Object.prototype.propertyIsEnumerable;
var c = (r, o, e) => o in r ? T(r, o, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[o] = e, f = (r, o) => {
  for (var e in o || (o = {}))
    u.call(o, e) && c(r, e, o[e]);
  if (t)
    for (var e of t(o))
      m.call(o, e) && c(r, e, o[e]);
  return r;
};
var $ = (r, o) => {
  var e = {};
  for (var a in r)
    u.call(r, a) && o.indexOf(a) < 0 && (e[a] = r[a]);
  if (r != null && t)
    for (var a of t(r))
      o.indexOf(a) < 0 && m.call(r, a) && (e[a] = r[a]);
  return e;
};
import b, { forwardRef as w } from "react";
import g from "styled-components";
import k from "prop-types";
import "../Field/Field.js";
import "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { useField as E } from "../Field/FieldContext.js";
import "../Typography/Typography.js";
import "../Field/FieldAction.js";
import { inputFocusStyle as R } from "../themes/utils.js";
const q = g.div`
  border: 1px solid ${({ theme: r, hasError: o }) => o ? r.colors.danger600 : r.colors.neutral200};
  border-radius: ${({ theme: r }) => r.borderRadius};

  padding-left: ${({ theme: r, hasLeftAction: o }) => o ? 0 : r.spaces[4]};
  padding-right: ${({ theme: r, hasRightAction: o }) => o ? 0 : r.spaces[4]};
  padding-top: ${({ theme: r }) => `${r.spaces[3]}`};
  padding-bottom: ${({ theme: r }) => `${r.spaces[3]}`};

  background: ${({ theme: r, disabled: o }) => o ? r.colors.neutral150 : r.colors.neutral0};
  ${R()}
`, v = g.textarea`
  display: block;
  width: 100%;
  font-weight: 400;
  font-size: ${14 / 16}rem;
  border: none;
  color: ${({ theme: r, disabled: o }) => o ? r.colors.neutral600 : r.colors.neutral800};
  resize: none;
  background: inherit;

  ::placeholder {
    color: ${({ theme: r }) => r.colors.neutral500};
    opacity: 1;
  }

  &:focus-within {
    outline: none;
  }
`, l = w((a, e) => {
  var p = a, { disabled: r } = p, o = $(p, ["disabled"]);
  const { id: i, error: d, hint: y, name: x, required: h } = E();
  let n;
  d ? n = `${i}-error` : y && (n = `${i}-hint`);
  const s = Boolean(d);
  return /* @__PURE__ */ b.createElement(q, {
    hasError: s,
    disabled: r
  }, /* @__PURE__ */ b.createElement(v, f({
    id: i,
    name: x,
    ref: e,
    "aria-describedby": n,
    "aria-invalid": s,
    disabled: r,
    hasError: s,
    "aria-required": h
  }, o)));
});
l.displayName = "TextareaInput";
l.defaultProps = {
  disabled: !1
};
l.propTypes = {
  disabled: k.bool
};
export {
  l as TextareaInput
};
