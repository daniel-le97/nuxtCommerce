var b = Object.defineProperty;
var l = Object.getOwnPropertySymbols;
var p = Object.prototype.hasOwnProperty, c = Object.prototype.propertyIsEnumerable;
var d = (e, t, r) => t in e ? b(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, s = (e, t) => {
  for (var r in t || (t = {}))
    p.call(t, r) && d(e, r, t[r]);
  if (l)
    for (var r of l(t))
      c.call(t, r) && d(e, r, t[r]);
  return e;
};
var f = (e, t) => {
  var r = {};
  for (var o in e)
    p.call(e, o) && t.indexOf(o) < 0 && (r[o] = e[o]);
  if (e != null && l)
    for (var o of l(e))
      t.indexOf(o) < 0 && c.call(e, o) && (r[o] = e[o]);
  return r;
};
import a from "react";
import i from "prop-types";
import y from "styled-components";
import { Field as F } from "../Field/Field.js";
import { FieldLabel as w } from "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { FieldHint as O } from "../Field/FieldHint.js";
import { FieldError as $ } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { TextareaInput as q } from "./TextareaInput.js";
import { Stack as I } from "../Stack/Stack.js";
import { Flex as R } from "../Flex/Flex.js";
import { useId as A } from "../helpers/useId.js";
const P = y.div`
  & textarea {
    // TODO: remove when we'll have fonts in the theme
    height: ${80 / 16}rem;
    line-height: ${20 / 16}rem;
  }

  & textarea::placeholder {
    font-weight: 400;
    font-size: ${14 / 16}rem;
    line-height: 1.43;
    color: ${({ theme: e }) => e.colors.neutral500};
    opacity: 1;
  }
`, n = a.forwardRef(
  (_, E) => {
    var m = _, { name: e, hint: t, error: r, label: o, children: h, labelAction: u, id: g, required: v } = m, x = f(m, ["name", "hint", "error", "label", "children", "labelAction", "id", "required"]);
    const T = A("textarea", g);
    return /* @__PURE__ */ a.createElement(P, null, /* @__PURE__ */ a.createElement(F, {
      name: e,
      hint: t,
      error: r,
      id: T,
      required: v
    }, /* @__PURE__ */ a.createElement(I, {
      spacing: 1
    }, o && /* @__PURE__ */ a.createElement(R, null, /* @__PURE__ */ a.createElement(w, {
      action: u
    }, o)), /* @__PURE__ */ a.createElement(q, s({
      ref: E,
      as: "textarea",
      value: h
    }, x)), /* @__PURE__ */ a.createElement(O, null), /* @__PURE__ */ a.createElement($, null))));
  }
);
n.displayName = "Textarea";
n.defaultProps = {
  "aria-label": void 0,
  label: void 0,
  labelAction: void 0,
  error: void 0,
  hint: void 0,
  id: void 0,
  children: "",
  required: !1
};
n.propTypes = {
  "aria-label": i.string,
  children: i.string,
  error: i.string,
  hint: i.oneOfType([i.string, i.node, i.arrayOf(i.node)]),
  id: i.string,
  label: i.string,
  labelAction: i.element,
  name: i.string.isRequired,
  required: i.bool
};
export {
  n as Textarea
};
