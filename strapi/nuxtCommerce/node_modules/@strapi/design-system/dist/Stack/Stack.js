var P = Object.defineProperty;
var a = Object.getOwnPropertySymbols;
var p = Object.prototype.hasOwnProperty, d = Object.prototype.propertyIsEnumerable;
var l = (e, t, o) => t in e ? P(e, t, { enumerable: !0, configurable: !0, writable: !0, value: o }) : e[t] = o, i = (e, t) => {
  for (var o in t || (t = {}))
    p.call(t, o) && l(e, o, t[o]);
  if (a)
    for (var o of a(t))
      d.call(t, o) && l(e, o, t[o]);
  return e;
};
var g = (e, t) => {
  var o = {};
  for (var r in e)
    p.call(e, r) && t.indexOf(r) < 0 && (o[r] = e[r]);
  if (e != null && a)
    for (var r of a(e))
      t.indexOf(r) < 0 && d.call(e, r) && (o[r] = e[r]);
  return o;
};
import f, { forwardRef as b } from "react";
import n from "prop-types";
import u from "styled-components";
import { Flex as h } from "../Flex/Flex.js";
const w = {
  size: !0
}, k = u(h).withConfig({
  shouldForwardProp: (e, t) => !w[e] && t(e)
})`
  & > * {
    margin-top: 0;
    margin-bottom: 0;
  }

  & > * + * {
    margin-top: ${({ theme: e, spacing: t }) => e.spaces[t]};
  }
`, S = u(h).withConfig({
  shouldForwardProp: (e, t) => !w[e] && t(e)
})`
  & > * {
    margin-left: 0;
    margin-right: 0;
  }

  & > * + * {
    margin-left: ${({ theme: e, spacing: t }) => e.spaces[t]};
  }
`, s = b((y, c) => {
  var m = y, { horizontal: e, spacing: t, size: o } = m, r = g(m, ["horizontal", "spacing", "size"]);
  return o && console.warn(
    'Deprecation warning: Usage of "size" prop in Stack component is deprecated. This is discouraged and will be removed in the next major release. Please use "spacing" instead'
  ), e ? /* @__PURE__ */ f.createElement(S, i({
    ref: c,
    spacing: t || o
  }, r)) : /* @__PURE__ */ f.createElement(k, i({
    direction: "column",
    alignItems: "stretch",
    ref: c,
    spacing: t || o
  }, r));
});
s.displayName = "Stack";
s.defaultProps = {
  horizontal: !1,
  size: void 0,
  spacing: void 0
};
s.propTypes = {
  horizontal: n.bool,
  size: n.number,
  spacing: n.number
};
export {
  s as Stack
};
