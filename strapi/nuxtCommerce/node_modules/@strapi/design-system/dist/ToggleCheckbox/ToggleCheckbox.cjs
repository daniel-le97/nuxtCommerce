"use strict";var E=Object.defineProperty,$=Object.defineProperties;var z=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var x=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var h=(e,t,l)=>t in e?E(e,t,{enumerable:!0,configurable:!0,writable:!0,value:l}):e[t]=l,b=(e,t)=>{for(var l in t||(t={}))x.call(t,l)&&h(e,l,t[l]);if(u)for(var l of u(t))y.call(t,l)&&h(e,l,t[l]);return e},C=(e,t)=>$(e,z(t));var q=(e,t)=>{var l={};for(var r in e)x.call(e,r)&&t.indexOf(r)<0&&(l[r]=e[r]);if(e!=null&&u)for(var r of u(e))t.indexOf(r)<0&&y.call(e,r)&&(l[r]=e[r]);return l};Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const B=require("react"),S=require("prop-types"),V=require("styled-components"),W=require("../themes/sizes.cjs"),H=require("../themes/utils.cjs"),F=require("../Typography/Typography.cjs"),I=require("../VisuallyHidden/VisuallyHidden.cjs"),M=require("../Box/Box.cjs");require("../Field/Field.cjs");require("../Field/FieldLabel.cjs");require("../Field/FieldInput.cjs");const P=require("../Field/FieldContext.cjs");require("../Field/FieldAction.cjs");const O=require("../Flex/Flex.cjs"),p=e=>e&&typeof e=="object"&&"default"in e?e:{default:e},n=p(B),i=p(S),s=p(V),A=s.default.label`
  position: relative;
  display: inline-block;
  z-index: 0;
  width: 100%;
`,D=s.default(M.Box)`
  cursor: ${({disabled:e})=>e?"not-allowed":void 0};
  // Masks the background of each value
  overflow: hidden;
  flex-wrap: wrap;

  ${H.inputFocusStyle()}
`,j=s.default(O.Flex).attrs({hasRadius:!0})`
  background-color: ${({theme:e,checked:t,disabled:l})=>t?l?e.colors.neutral200:e.colors.neutral0:"transparent"};
  border: 1px solid
    ${({theme:e,checked:t,disabled:l})=>t&&t!==null?l?e.colors.neutral300:e.colors.neutral200:l?e.colors.neutral150:e.colors.neutral100};
  position: relative;
  user-select: none;
  z-index: 2;
  flex: 1 1 50%;
  /**
    We declare the defined value because we want the height of the input when 
    the values are in a row to be 40px. But defining a height on the label
    would break the input when it wraps.
  */
  padding-top: ${({size:e})=>`${e==="S"?"2px":"6px"}`};
  padding-bottom: ${({size:e})=>`${e==="S"?"2px":"6px"}`};
`,N=s.default.input`
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: 1;
  width: 100%;
`,d=n.default.forwardRef((G,w)=>{var f=G,{size:e,onLabel:t,offLabel:l,children:r,checked:o,disabled:a,onChange:m}=f,T=q(f,["size","onLabel","offLabel","children","checked","disabled","onChange"]);const{name:v,required:k}=P.useField(),g="neutral600";let R=!o&&o!==null?"danger700":g,L=o?"primary600":g;const _=c=>{a||m(c)};return n.default.createElement(A,null,n.default.createElement(I.VisuallyHidden,null,r),n.default.createElement(D,{hasRadius:!0,disabled:a,padding:1,display:"flex",background:a?"neutral150":"neutral100",borderStyle:"solid",borderWidth:"1px",borderColor:"neutral200"},n.default.createElement(j,{size:e,paddingLeft:3,paddingRight:3,justifyContent:"center",alignItems:"center","aria-hidden":!0,checked:o===null?!1:!o,disabled:a},n.default.createElement(F.Typography,{variant:"pi",fontWeight:"bold",textTransform:"uppercase",textColor:a?"neutral700":R},l)),n.default.createElement(j,{size:e,paddingLeft:3,paddingRight:3,justifyContent:"center",alignItems:"center","aria-hidden":!0,checked:o===null?!1:o,disabled:a},n.default.createElement(F.Typography,{variant:"pi",fontWeight:"bold",textTransform:"uppercase",textColor:a?"neutral700":L},t)),n.default.createElement(N,C(b({type:"checkbox","aria-disabled":a,onChange:c=>_(c),name:v,ref:w,"aria-required":k},T),{checked:!(o===null||!o)}))))});d.displayName="ToggleCheckbox";d.defaultProps={disabled:!1,checked:!1,onChange:void 0,size:"M"};d.propTypes={checked:i.default.bool,children:i.default.string.isRequired,disabled:i.default.bool,offLabel:i.default.string.isRequired,onChange:i.default.func,onLabel:i.default.string.isRequired,size:i.default.oneOf(Object.keys(W.sizes.input))};exports.ToggleCheckbox=d;
