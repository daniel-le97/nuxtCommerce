var w = Object.defineProperty;
var r = Object.getOwnPropertySymbols;
var u = Object.prototype.hasOwnProperty, b = Object.prototype.propertyIsEnumerable;
var p = (e, o, t) => o in e ? w(e, o, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[o] = t, c = (e, o) => {
  for (var t in o || (o = {}))
    u.call(o, t) && p(e, t, o[t]);
  if (r)
    for (var t of r(o))
      b.call(o, t) && p(e, t, o[t]);
  return e;
};
var f = (e, o) => {
  var t = {};
  for (var a in e)
    u.call(e, a) && o.indexOf(a) < 0 && (t[a] = e[a]);
  if (e != null && r)
    for (var a of r(e))
      o.indexOf(a) < 0 && b.call(e, a) && (t[a] = e[a]);
  return t;
};
import S, { forwardRef as D } from "react";
import n from "prop-types";
import K from "styled-components";
import { KeyboardKeys as s } from "../helpers/keyboardKeys.js";
import { UpState as k, DownState as x } from "./constants.js";
const R = K.button`
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  top: 0;
  width: 100%;
  background: transparent;
  border: none;

  // The focus state is moved to the parent thanks to :focus-within
  &:focus {
    outline: none;
  }

  &[aria-disabled='true'] {
    cursor: not-allowed;
  }
`, l = D((B, m) => {
  var i = B, { labelledBy: e, expanded: o, onTrigger: t, disabled: a } = i, y = f(i, ["labelledBy", "expanded", "onTrigger", "disabled"]);
  const h = (d) => {
    if (!a)
      switch (d.key) {
        case s.DOWN:
        case s.SPACE:
        case s.ENTER: {
          d.preventDefault(), t(x.Keyboard);
          break;
        }
        case s.UP: {
          d.preventDefault(), t(k.Keyboard);
          break;
        }
      }
  };
  return /* @__PURE__ */ S.createElement(R, c({
    ref: m,
    "aria-labelledby": e,
    "aria-haspopup": "listbox",
    "aria-expanded": o,
    onKeyDown: h,
    "aria-disabled": a,
    type: "button"
  }, y));
});
l.displayName = "SelectButton";
l.defaultProps = {
  expanded: !1,
  disabled: !1
};
l.propTypes = {
  disabled: n.bool,
  expanded: n.bool,
  labelledBy: n.string.isRequired,
  onTrigger: n.func.isRequired
};
export {
  l as SelectButton
};
