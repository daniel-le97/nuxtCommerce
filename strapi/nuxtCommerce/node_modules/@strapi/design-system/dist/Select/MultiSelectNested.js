var l = Object.defineProperty;
var p = Object.getOwnPropertySymbols;
var i = Object.prototype.hasOwnProperty, E = Object.prototype.propertyIsEnumerable;
var y = (e, t, o) => t in e ? l(e, t, { enumerable: !0, configurable: !0, writable: !0, value: o }) : e[t] = o, k = (e, t) => {
  for (var o in t || (t = {}))
    i.call(t, o) && y(e, o, t[o]);
  if (p)
    for (var o of p(t))
      E.call(t, o) && y(e, o, t[o]);
  return e;
};
var n = (e, t) => {
  var o = {};
  for (var r in e)
    i.call(e, r) && t.indexOf(r) < 0 && (o[r] = e[r]);
  if (e != null && p)
    for (var r of p(e))
      t.indexOf(r) < 0 && E.call(e, r) && (o[r] = e[r]);
  return o;
};
import a from "react";
import O from "prop-types";
import { OptGroup as v } from "./OptGroup.js";
import { Option as c } from "./Option.js";
import { Select as R } from "./Select.js";
const S = (o) => {
  var r = o, { options: e } = r, t = n(r, ["options"]);
  return /* @__PURE__ */ a.createElement(R, k({
    multi: !0
  }, t), e.map(
    ({ label: u, value: s, children: m }) => m ? /* @__PURE__ */ a.createElement(v, {
      key: u,
      label: u
    }, m == null ? void 0 : m.map((f) => /* @__PURE__ */ a.createElement(c, {
      key: f.value,
      value: f.value
    }, f.label))) : /* @__PURE__ */ a.createElement(c, {
      key: s,
      value: s
    }, u)
  ));
};
S.propTypes = {
  options: O.arrayOf(O.object).isRequired
};
export {
  S as MultiSelectNested
};
