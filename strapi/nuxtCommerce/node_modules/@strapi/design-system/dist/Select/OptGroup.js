var y = Object.defineProperty;
var o = Object.getOwnPropertySymbols;
var n = Object.prototype.hasOwnProperty, u = Object.prototype.propertyIsEnumerable;
var m = (e, r, t) => r in e ? y(e, r, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[r] = t, s = (e, r) => {
  for (var t in r || (r = {}))
    n.call(r, t) && m(e, t, r[t]);
  if (o)
    for (var t of o(r))
      u.call(r, t) && m(e, t, r[t]);
  return e;
};
var d = (e, r) => {
  var t = {};
  for (var p in e)
    n.call(e, p) && r.indexOf(p) < 0 && (t[p] = e[p]);
  if (e != null && o)
    for (var p of o(e))
      r.indexOf(p) < 0 && u.call(e, p) && (t[p] = e[p]);
  return t;
};
import a from "prop-types";
import i from "react";
import { Option as O } from "./Option.js";
const c = (p) => {
  var l = p, { children: e, label: r } = l, t = d(l, ["children", "label"]);
  const f = e.map((g) => g.props.value);
  return /* @__PURE__ */ i.createElement(i.Fragment, null, /* @__PURE__ */ i.createElement(O, s({
    "data-opt-group": !0,
    "data-opt-group-children": f,
    "aria-label": `${r}, ${e.length} items`
  }, t), r), e);
};
c.propTypes = {
  children: a.arrayOf(a.node).isRequired,
  label: a.string.isRequired
};
c.displayName = "OptGroup";
export {
  c as OptGroup
};
